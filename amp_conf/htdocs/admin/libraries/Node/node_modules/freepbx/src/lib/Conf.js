import { Promise } from 'bluebird'

export default class Conf {
	constructor(db) {
		this.configs = {}
		this.db = db
		this.init = false
	}

	load() {
		return new Promise((resolve, reject) => {
			var query = this.db.query('SELECT * FROM freepbx_settings')
			query.on('result', row => {
				var val = row.value
				if (row.type === "bool") {
					val = row.value !== 0 ? true : false
				}
				this.configs[row.keyword] = val
			}).on('end', () => {
				this.init = true
				resolve(this.configs)
			})
		})
	}

	getAll(cached = true) {
		if (!this.init || !cached) {
			return new Promise((resolve, reject) => {
				return this.load().then((configs) => {
					resolve(configs)
				})
			})
		} else {
			return Promise.resolve(this.configs)
		}
	}

	get(keyword, cached = true) {
		if (!cached) {
			return new Promise((resolve, reject) => {
				this.load().then((configs) => {
					if(typeof this.configs[keyword] !== "undefined") {
						resolve(this.configs[keyword])
					} else {
						reject(new Error('configs is undefined'))
					}
				})
			})
		} else {
			if(typeof this.configs[keyword] !== "undefined") {
				return Promise.resolve(this.configs[keyword])
			} else {
				return Promise.reject(new Error('configs is undefined'))
			}

		}
	}
}
