/* jshint node:true, newcap:false */
import mysql from 'mysql'
import { Promise } from 'bluebird'
import child_process from 'child_process'
import Conf from './Conf'
import Kvstore from './Kvstore'
import asterisk_manager from 'asterisk-manager'

export class FreePBX {
	constructor() {
		this.version = null
		this.connected = false
		this.config = null
		this.db = null
		this.kvstore = null
		this.astman = null
	}
	connect() {
		return new Promise((resolve, reject) => {
			if(this.connected) {
				resolve({
					config: this.config,
					db: this.db,
					kvstore: this.kvstore,
					astman: this.astman,
					version: this.version
				})
				return
			}
			this.exec(
				'php -r \'$bootstrap_settings["skip_astman"] = true; ' +
				'$restrict_mods = true; $bootstrap_settings["returnimmediately"] = true; '+
				'include("/etc/freepbx.conf"); print json_encode($amp_conf);\''
			)
			.then(config => {
				return this.databaseConnect({config})
			})
			.then(({config, db}) => {
				return this.loadConfig({config, db})
			})
			.then(({config, db}) => {
				return this.getPBXVersion({config, db})
			})
			.then(({config, db}) => {
				return this.loadKVStore({config, db})
			})
			.then(({config, db, kvstore}) => {
				return this.AMIConnect({config, db, kvstore})
			})
			.then(pbx => {
				this.config = pbx.config
				this.db = pbx.db
				this.kvstore = pbx.kvstore
				this.astman = pbx.astman
				this.connected = true
				pbx.version = this.version
				resolve(pbx)
			})
			.catch(err => {
        return reject(err)
			})
		})
	}

	databaseConnect({config}) {
		return new Promise(function (resolve, reject) {
			let connection = {};
			if(typeof config.AMPDBSOCK !== "undefined" && config.AMPDBSOCK.length) {
				connection = mysql.createPool({
					connectionLimit : 10,
					socketPath : config.AMPDBSOCK,
					user     : config.AMPDBUSER,
					password : config.AMPDBPASS,
					database : config.AMPDBNAME,
					charset: 'UTF8'
				});
			} else {
				let port = (typeof config.AMPDBPORT !== "undefined" && config.AMPDBPORT.length) ? config.AMPDBPORT : 3306
				connection = mysql.createPool({
					connectionLimit : 10,
					host     : config.AMPDBHOST,
					port     : port,
					user     : config.AMPDBUSER,
					password : config.AMPDBPASS,
					database : config.AMPDBNAME,
					charset: 'UTF8'
				});
			}
			resolve({config, db: connection});
		});
	}

	loadConfig({config, db}) {
		return new Promise(function (resolve, reject) {
			let confClass = new Conf(db)
			confClass.load()
			.then((configs) => {
				configs.AMPDBHOST = config.AMPDBHOST
				configs.AMPDBUSER = config.AMPDBUSER
				configs.AMPDBPASS = config.AMPDBPASS
				configs.AMPDBNAME = config.AMPDBNAME
				configs.AMPDBSOCK = config.AMPDBSOCK
				resolve({config: confClass, db})
			}).catch((err) => {
				reject(err);
			});
		})
	}

	loadKVStore({config, db}) {
		return new Promise((resolve, reject) => {
			let kvstore = new Kvstore({db, version: this.version})
			resolve({config, db, kvstore})
		})
	}

	AMIConnect({config, db, kvstore}) {
		return new Promise((resolve, reject) => {
			let astman = new asterisk_manager(
				config.configs.ASTMANAGERPORT,
				config.configs.ASTMANAGERHOST,
				config.configs.AMPMGRUSER,
				config.configs.AMPMGRPASS,
				true
			)

			astman.keepConnected();

			astman.on("connect", (evt) => {
				resolve({config, db, kvstore, astman});
			});

			astman.on("error", (evt) => {
				reject(new Error("There was an error with Asterisk Manager Connection, is Asterisk running?"));
			});

			astman.on("close", (evt) => {
				reject(new Error("There was an error with Asterisk Manager Connection is Asterisk running?"));
			});
		});
	}

	getPBXVersion({config, db}) {
		return new Promise((resolve, reject) => {
			db.query("SELECT `value` FROM `admin` WHERE `variable` = 'version'", (error, results, fields) => {
				if(error) {
					return reject(error);
				}
				this.version = results[0].value
				resolve({config, db});
			});
		});
	}

	exec(cmd) {
		return new Promise((resolve, reject) => {
			child_process.exec(
				cmd,
				(err, stdout, stderr) => {
					if(err) {
						return reject(err)
					} else if(stderr) {
						return reject(new Error(stderr))
					} else {
						try {
							let config = JSON.parse(stdout);
							return resolve(config)
						} catch(err) {
							return reject(err)
						}
					}
				}
			)
		})
	}
}

export default new FreePBX()
