/* eslint-env jest */

import uuidv4 from 'uuid/v4'
import { Promise } from 'bluebird'
import Kvstore from './Kvstore'

jest.mock('uuid/v4')

uuidv4.mockImplementation(() => {
  return 'some-uuidv4'
})

describe('Kvstore is', () => {
  let db
  let kvstore
  beforeEach(() => {
    db = {}
    const params = {
      db: db,
      version: '14.0'
    }
     kvstore = new Kvstore(params)
  })
  it('Check that constructor initialize correctly', () => {
    expect(kvstore.db).toEqual(db)
    expect(kvstore.version).toEqual('14')
  })
  it('Check getConfig resolves false if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.getConfig('some-module')).resolves.toEqual(false)
  })
  it('Check getConfig resolves false if !results of query', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({}))
    return expect(kvstore.getConfig('some-module')).resolves.toEqual(false)
  })
  /*it('Check getConfig function resolves false if parseResult fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve(['some-value']))
    kvstore.parseResult = jest.fn()
    kvstore.parseResult.mockReturnValue(Promise.reject(new Error('parseResult failed')))
    return expect(kvstore.getConfig('some-module')).resolves.toEqual(false)
  })*/
  it('Check getConfig gunction resolves query result if defined', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve(['some-value']))
    kvstore.parseResult = jest.fn()
    kvstore.parseResult.mockReturnValue(Promise.resolve('some-result'))
    return kvstore.getConfig('some-module').then(response => {
      expect(response).toEqual('some-result')
    })
  })
  it('Check getAllConfig function resolves empty array if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.getAllConfig('some-module')).resolves.toEqual([])
  })
/*  it('Check getAllConfig rejects if parseResult fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({
      '1': {
        key: 'some-key'
      }
    }))
    kvstore.parseResult = jest.fn()
    kvstore.parseResult.mockReturnValue(Promise.reject(new Error('parseResult failed')))
    return expect(kvstore.getAllConfig('some-module')).rejects.toEqual(new Error('parseResult failed'))
  })*/
  it('Check getAllConfig resolves settings', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({
      '1': {
        key: 'some-key'
      }
    }))
    kvstore.parseResult = jest.fn()
    kvstore.parseResult.mockReturnValue(Promise.resolve('value'))
    return expect(kvstore.getAllConfig('some-module')).resolves.toEqual({
      'some-key': 'value'
    })
  })
  it('Check setConfig function rejects if query fails for blob', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    let value = {}
    for(let i=0; i<=300; i++){
      value['par'+i] = 'val' + i
    }
    return expect(kvstore.setConfig('some-module','some-key',value)).rejects.toEqual(new Error('query failed'))
  })
  it('Check setConfig function resolves affectedRows for blob', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({
      affectedRows: 'affectedRows'
    }))
    kvstore.deleteBlob = jest.fn()
    kvstore.deleteBlob.mockReturnValue(Promise.resolve('some-result'))
    kvstore.insertBlob = jest.fn()
    kvstore.insertBlob.mockReturnValue(Promise.resolve('some-uid'))
    let value = {}
    for(let i=0; i<=300; i++){
      value['par'+i] = 'val' + i
    }
    return expect(kvstore.setConfig('some-module','some-key',value)).resolves.toEqual('affectedRows')
  })
  it('Check setConfig function rejects if query fails for no blob', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.setConfig('some-module')).rejects.toEqual(new Error('query failed'))
  })
  it('Check setConfig function resolves affectedRows for no blob', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({
      affectedRows: 'affectedRows'
    }))
    return expect(kvstore.setConfig('some-module')).resolves.toEqual('affectedRows')
  })
  it('Check setConfig function rejects if query fails for version 13', () => {
    kvstore.version = '13'
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.setConfig('some-module')).rejects.toEqual(new Error('query failed'))
  })
  it('Check setConfig function resolves affectedRows for version 13', () => {
    kvstore.version = '13'
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({
      affectedRows: 'affectedRows'
    }))
    return expect(kvstore.setConfig('some-module')).resolves.toEqual('affectedRows')
  })
  it('Check deleteBlob function rejects if !uuid', () => {
    return expect(kvstore.deleteBlob()).rejects.toEqual(new Error('No uuid'))
  })
  it('Check deleteBlob function rejects if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.deleteBlob('some-uuid')).rejects.toEqual(new Error('query failed'))
  })
/*  it('Check deleteBlob function rejects if createKvblobstore fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject({
      sqlState: '42S02'
    }))
    kvstore.createKvblobstore = jest.fn()
    kvstore.createKvblobstore.mockReturnValue(Promise.reject(new Error('createKvblobstore failed')))
    return expect(kvstore.deleteBlob('some-uuid')).rejects.toEqual(new Error('createKvblobstore failed'))
  })*/
  it('Check deleteBlob function resolves true if createKvblobstore success', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject({
      sqlState: '42S02'
    }))
    kvstore.createKvblobstore = jest.fn()
    kvstore.createKvblobstore.mockReturnValue(Promise.resolve())
    return expect(kvstore.deleteBlob('some-uuid')).resolves.toEqual(true)
  })
  it('Check deleteBlob function resolves true if query success', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve())
    return expect(kvstore.deleteBlob('some-uuid')).resolves.toEqual(true)
  })
  it('Check getBlob function rejects if !uuid', () => {
    return expect(kvstore.getBlob()).rejects.toEqual(new Error('No uuid'))
  })
  it('Check getBlob function rejects if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.getBlob('some-uuid')).rejects.toEqual(new Error('query failed'))
  })
  it('Check getBlob function resolves if createKvblobstore success', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject({
      sqlState: '42S02'
    }))
    kvstore.createKvblobstore = jest.fn()
    kvstore.createKvblobstore.mockReturnValue(Promise.resolve())
    return expect(kvstore.getBlob('some-uuid')).resolves.toEqual({
      'content': '',
      'type': false
    })
  })
  it('Check getBlob function resolves empty content if !results', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve({}))
    return expect(kvstore.getBlob('some-uuid')).resolves.toEqual({
      'content': '',
      'type': false
    })
  })
  it('Check getBlob function resolves content', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve([
      {
        content: 'some-content',
        type: 'some-type'
      }
    ]))
    return expect(kvstore.getBlob('some-uuid')).resolves.toEqual({
      'content': 'some-content',
      'type': 'some-type'
    })
  })
  it('Check insertBlob function rejects if !val', () => {
    return expect(kvstore.insertBlob()).rejects.toEqual(new Error('No val'))
  })
  it('Check insertBlob function rejects if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.insertBlob('some-uuid')).rejects.toEqual(new Error('query failed'))
  })
  it('Check insertBlob function resolves if query success', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve())
    return expect(kvstore.insertBlob('some-uuid')).resolves.toEqual('some-uuidv4')
  })
  it('Check createKvblobstore function rejects if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.createKvblobstore()).rejects.toEqual(new Error('query failed'))
  })
  it('Check createKvblobstore function resolves true if query success', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve())
    return expect(kvstore.createKvblobstore()).resolves.toEqual(true)
  })
  it('Check delConfig function rejects if query fails for version 13', () => {
    kvstore.version = '13'
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.delConfig('some-module')).rejects.toEqual(new Error('query failed'))
  })
  it('Check delConfig function resolves true if query success for version 13', () => {
    kvstore.version = '13'
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve())
    return expect(kvstore.delConfig('some-module')).resolves.toEqual(true)
  })
  it('Check delConfig function rejects if query fails', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.reject(new Error('query failed')))
    return expect(kvstore.delConfig('some-module')).rejects.toEqual(new Error('query failed'))
  })
  it('Check delConfig function resolves if all success', () => {
    kvstore.query = jest.fn()
    kvstore.query.mockReturnValue(Promise.resolve('value'))
    kvstore.deleteBlob = jest.fn()
    kvstore.deleteBlob.mockReturnValue(Promise.resolve())
    return expect(kvstore.delConfig('some-module')).resolves.toEqual(true)
  })
  it('Check parseResult function resolves val toString if !type', () => {
    const result = {
      val: 'some-val'
    }
    return expect(kvstore.parseResult(result)).resolves.toEqual(result.val.toString('utf8'))
  })
  it('Check parseResult function resolves val toString if type is json-arr and val is not JSON', () => {
    const result = {
      type: 'json-arr',
      val: 'some-val'
    }
    return expect(kvstore.parseResult(result)).resolves.toEqual(result.val.toString('utf8'))
  })
  it('Check parseResult function resolves JSON.parse if type is json-arr', () => {
    const result = {
      type: 'json-arr',
      val: '{"par1": "val1"}'
    }
    return expect(kvstore.parseResult(result)).resolves.toEqual({
      par1: 'val1'
    })
  })
  it('Check parseResult function rejects if getBlob fails', () => {
    const result = {
      type: 'blob',
      val: 'some-val'
    }
    kvstore.getBlob = jest.fn()
    kvstore.getBlob.mockReturnValue(Promise.reject(new Error('getBlob failed')))
    return expect(kvstore.parseResult(result)).rejects.toEqual(new Error('getBlob failed'))
  })
  it('Check parseResult function resolves content toString if content type is not json-arr', () => {
    const result = {
      type: 'blob',
      val: 'some-val'
    }
    const content = {
      type: 'some-type',
      content: 'some-content'
    }
    kvstore.getBlob = jest.fn()
    kvstore.getBlob.mockReturnValue(Promise.resolve(content))
    return expect(kvstore.parseResult(result)).resolves.toEqual(content.content.toString('utf8'))
  })
  it('Check parseResult function resolves content toString if content is not JSON for blob case', () => {
    const result = {
      type: 'blob',
      val: 'some-val'
    }
    const content = {
      type: 'json-arr',
      content: 'some-content'
    }
    kvstore.getBlob = jest.fn()
    kvstore.getBlob.mockReturnValue(Promise.resolve(content))
    return expect(kvstore.parseResult(result)).resolves.toEqual(content.content.toString('utf8'))
  })
  it('Check parseResult function resolves parse content for blob case', () => {
    const result = {
      type: 'blob',
      val: 'some-val'
    }
    const content = {
      type: 'json-arr',
      content: '{"par1": "val1"}'
    }
    kvstore.getBlob = jest.fn()
    kvstore.getBlob.mockReturnValue(Promise.resolve(content))
    return expect(kvstore.parseResult(result)).resolves.toEqual({
      par1: 'val1'
    })
  })
  it('Check query function rejects if error', () => {
    const db = {
      query: (a,b,c) => c(new Error('query failed'),'','')
    }
    const params = {
      db: db,
      version: '14.0'
    }
    const kvstore = new Kvstore(params)
    return expect(kvstore.query('some-query')).rejects.toEqual(new Error('query failed'))
  })
  it('Check query function resolves results', () => {
    const db = {
      query: (a,b,c) => c(false,'some-results','')
    }
    const params = {
      db: db,
      version: '14.0'
    }
    const kvstore = new Kvstore(params)
    return expect(kvstore.query('some-query')).resolves.toEqual('some-results')
  })
})
