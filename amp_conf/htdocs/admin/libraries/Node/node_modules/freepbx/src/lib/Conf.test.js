/* eslint-env jest */

import { Promise } from 'bluebird'
import Conf from './Conf'

describe('Conf is', () => {
  let db
  let conf
  beforeEach(() => {
    db = {
      query: () => {
        return {
          on: (a, b) => b({
            value: 0,
            type: 'bool',
            keyword: 'some-keyword'
          })
        }
      }
    }
    conf = new Conf(db)
  })
  it('Check that constructor initialize correctly', () => {
    expect(conf.init).toEqual(false)
    expect(conf.db).toEqual(db)
    expect(conf.configs).toEqual({})
  })
  it('Check getAll function resolves current configs if init and cached', () => {
    conf.init = true
    return conf.getAll().then(response => {
      expect(response).toEqual({})
    })
  })
  it('Check getAll function resolves load configs if !init or !cached', () => {
    conf.load = jest.fn()
    conf.load.mockReturnValue(Promise.resolve('some-configs'))
    return conf.getAll().then(response => {
      expect(response).toEqual('some-configs')
    })
  })
  it('Check get function rejects if configs is undefined', () => {
    return expect(conf.get('some-keyword')).rejects.toEqual(new Error('configs is undefined'))
  })
  it('Check get function resolves configs if cached', () => {
    conf.configs['some-keyword'] = 'some-value'
    return conf.get('some-keyword').then(response => {
      expect(response).toEqual('some-value')
    })
  })
  it('Check get function rejects load config if !cached and !configs', () => {
    conf.load = jest.fn()
    conf.load.mockImplementation(() => {
      return Promise.resolve()
    })
    return expect(conf.get('some-keyword', false)).rejects.toEqual(new Error('configs is undefined'))
  })
  it('Check get function resolves load config if !cached', () => {
    conf.load = jest.fn()
    conf.load.mockImplementation(() => {
      conf.configs['some-keyword'] = 'some-value'
      return Promise.resolve()
    })
    return conf.get('some-keyword', false).then(response => {
      expect(response).toEqual('some-value')
    })
  })
})
