import { Promise } from 'bluebird';
import async from 'async';
import versionCompare from 'locutus/php/info/version_compare';
import uuidv4 from 'uuid/v4';

export default class Kvstore {
	constructor({db, version}) {
		this.db = db;
		this.version = versionCompare(version,"14.0","<") ? "13" : "14";
	}

	getConfig(module, key = null, id = 'noid') {
		return new Promise((resolve, reject) => {
			let sql
			let fields = []
			if(this.version != '13') {
				sql = 'SELECT * FROM ?? WHERE `key` = ? AND `id` = ?'
				fields = [
					'kvstore_' + module.split('\\').join('_'),
					key,
					id
				]
			} else {
				sql = 'SELECT * FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?'
				fields = [
					module,
					key,
					id
				]
			}
			this.query(sql, fields)
			.then(results => {
				if(typeof results[0] === "undefined") {
					return Promise.resolve(false);
				} else {
					return this.parseResult(results[0])
				}
			})
			.then(result  => {
				resolve(result)
			})
			.catch(err => {
				resolve(false);
			})
		});
	}

	getAllConfig(module) {
		return new Promise((resolve, reject) => {
			let sql
			let fields = []
			if(this.version != '13') {
				sql = 'SELECT * FROM ??'
				fields = [
					'kvstore_' + module.split('\\').join('_')
				]
			} else {
				sql = 'SELECT * FROM `kvstore` WHERE `module` = ?'
				fields = [
					module
				]
			}
      this.query(sql, fields)
			.then(results => {
				let settings = {}
				async.each(results, (row, callback) => {
          this.parseResult(row)
					.then(res => {
						settings[row.key] = res
						callback()
					})
					.catch(err => {
						callback(err)
					})
				}, function(err){
					if(err){
						return reject(err)
					}
					resolve(settings);
				});
				//http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-was-not-returned-from-it
				return null
			})
			.catch(err => {
				resolve([]);
			})
		});
	}

	setConfig(module, key = null, value = false, id = 'noid') {
		return new Promise((resolve, reject) => {
			let type = null;
			if(typeof value === "object") {
				type = 'json-arr';
				value = JSON.stringify(value);
			} else if(typeof value === "boolean") {
				value = (value) ? 1 : 0;
			}
			if(this.version != '13') {
				if(value.length > 4000) {
					this.query(
						'SELECT * FROM ?? WHERE `key` = ? AND `id` = ?' ,
						[
							'kvstore_' + module.split('\\').join('_'),
							key,
							id
						]
					)
					.then(results => {
						if(results.length) {
							return this.deleteBlob(results[0].val)
						} else {
							return Promise.resolve(null)
						}
					})
					.then(result => {
						if(result) {
							return this.query(
								'DELETE FROM ?? WHERE `key` = ? AND `id` = ?' ,
								[
									'kvstore_' + module.split('\\').join('_'),
									key,
									id
								]
							)
						} else {
							return Promise.resolve(null)
						}
					})
					.then(result => {
						return this.insertBlob(value, type)
					})
					.then(uid => {
						return this.query(
							'REPLACE INTO ?? (`key`,`val`,`type`,`id`) VALUES (?,?,?,?)',
							[
								'kvstore_' + module.split('\\').join('_'),
								key,
								uid,
								'blob',
								id
							]
						)
					})
					.then(results => {
						resolve(results.affectedRows);
					})
					.catch(error => {
						reject(error);
					})
				} else {
					this.query(
						'REPLACE INTO ?? (`key`,`val`,`type`,`id`) VALUES (?,?,?,?)',
						[
							'kvstore_' + module.split('\\').join('_'),
							key,
							value,
							type,
							id
						]
					)
					.then(results => {
						resolve(results.affectedRows);
					})
					.catch(error => {
						reject(error);
					})
				}
			} else {
				this.query(
					'REPLACE INTO `kvstore` (`module`,`key`,`val`,`type`,`id`) VALUES (?,?,?,?,?)',
					[
						module,
						key,
						value,
						type,
						id
					]
				)
				.then(results => {
					resolve(results.affectedRows);
				})
				.catch(error => {
					reject(error);
				})
			}
		});
	}

	deleteBlob(uuid = false) {
		return new Promise((resolve, reject) => {
			if (!uuid) {
				return reject(new Error("No uuid"));
			}
      this.query('DELETE FROM `kvblobstore` WHERE `uuid`= ?', [uuid])
			.then(results => {
				resolve(true)
			})
			.catch(error => {
				if (error.sqlState == "42S02") {
					return this.createKvblobstore()
					.then(r => {
						resolve(true);
					})
					.catch(error => {
						reject(error);
					})
				} else {
					reject(error);
				}
			})
		})
	}

	getBlob(uuid = false) {
		return new Promise((resolve, reject) => {
			if (!uuid) {
				return reject(new Error("No uuid"));
			}
			this.query('SELECT * FROM `kvblobstore` WHERE `uuid`=?' , [uuid])
			.then(results => {
				if(!results[0]) {
					resolve({
						"content": "",
						"type": false
					});
				} else {
					resolve({
						"content": results[0].content,
						"type": results[0].type
					});
				}
			})
			.catch(error => {
				if (error.sqlState == "42S02") {
					this.createKvblobstore()
					.then(r => {
						resolve({
							"content": "",
							"type": false
						});
					})
					.catch(error => {
						reject(error);
					})
				} else {
					reject(error);
				}
			})
		})
	}

	insertBlob(val = false, type = "raw") {
		return new Promise((resolve, reject) => {
			if (!val) {
				return reject(new Error("No val"));
			}
			const id = uuidv4()
			// Try to insert our value
			this.query(
				'INSERT INTO `kvblobstore` (`uuid`, `type`, `content`) VALUES (?, ?, ?)',
				[
					id,
					type,
					val
				]
			)
			.then(results => {
				resolve(id)
			})
			.catch(error => {
				if (error.sqlState == "42S02") {
					this.createKvblobstore()
					.then(r => {
						this.insertBlob(val, type)
					})
					.then(iid => {
						resolve(iid)
					})
					.catch(error => {
						reject(error);
					})
				} else {
					reject(error);
				}
			})
		})
	}

	createKvblobstore() {
		return new Promise((resolve, reject) => {
			this.query('CREATE TABLE `kvblobstore` ( `uuid` CHAR(36) PRIMARY KEY, `type` CHAR(32), `content` LONGBLOB )')
			.then(results => {
				resolve(true)
			})
			.catch(error => {
				reject(error)
			})
		})

	}

	delConfig(module, key = null, id = 'noid') {
		return new Promise((resolve, reject) => {
			if(this.version != '13') {
				this.query(
					'SELECT * FROM ?? WHERE `key` = ? AND `id` = ?' ,
					[
						'kvstore_' + module.split('\\').join('_'),
						key,
						id
					]
				)
				.then(results => {
					if(results.length > 1) {
						return this.deleteBlob(results[0].val)
					} else {
						return Promise.resolve(null)
					}
				})
				.then(result => {
					return this.query(
						'DELETE FROM ?? WHERE `key` = ? AND `id` = ?' ,
						[
							'kvstore_' + module.split('\\').join('_'),
							key,
							id
						]
					)
				})
          .then(res => {
            resolve(true)
          })
				.catch(error => {
					reject(error);
				})
			} else {
				this.query(
					'DELETE FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?' ,
					[
						module,
						key,
						id
					]
				)
				.then(results => {
					resolve(true);
				})
				.catch(error => {
					reject(error);
				})
			}
		});
	}

	parseResult(result) {
		return new Promise((resolve, reject) => {
			switch(result.type) {
				case 'json-arr':
					try {
						resolve(JSON.parse(result.val))
					} catch(err) {
						resolve(result.val.toString('utf8'))
					}
				break;
				case 'blob':
					const id = result.val.toString('utf8')
					this.getBlob(id)
					.then(result => {
						if(result.type == 'json-arr') {
							try {
								resolve(JSON.parse(result.content))
							} catch(err) {
								resolve(result.content.toString('utf8'))
							}
						} else {
							resolve(result.content.toString('utf8'))
						}
					})
					.catch(error => {
						reject(error)
					})
				break;
				default:
					resolve(result.val.toString('utf8'))
				break;
			}
		})

	}

	query(sql, fields = []) {
		return new Promise((resolve, reject) => {
			this.db.query(sql, fields, (error, results, fields) => {
				if(error) {
					return reject(error);
				}
				resolve(results);
			});
		})
	}
}
