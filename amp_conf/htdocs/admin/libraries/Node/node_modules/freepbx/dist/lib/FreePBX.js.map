{"version":3,"sources":["../../src/lib/FreePBX.js"],"names":["FreePBX","version","connected","config","db","kvstore","astman","resolve","reject","exec","then","databaseConnect","loadConfig","getPBXVersion","loadKVStore","AMIConnect","pbx","catch","err","connection","AMPDBSOCK","length","createPool","connectionLimit","socketPath","user","AMPDBUSER","password","AMPDBPASS","database","AMPDBNAME","charset","port","AMPDBPORT","host","AMPDBHOST","confClass","load","configs","ASTMANAGERPORT","ASTMANAGERHOST","AMPMGRUSER","AMPMGRPASS","keepConnected","on","evt","Error","query","error","results","fields","value","cmd","stdout","stderr","JSON","parse"],"mappings":"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","file":"FreePBX.js","sourcesContent":["/* jshint node:true, newcap:false */\nimport mysql from 'mysql'\nimport { Promise } from 'bluebird'\nimport child_process from 'child_process'\nimport Conf from './Conf'\nimport Kvstore from './Kvstore'\nimport asterisk_manager from 'asterisk-manager'\n\nexport class FreePBX {\n\tconstructor() {\n\t\tthis.version = null\n\t\tthis.connected = false\n\t\tthis.config = null\n\t\tthis.db = null\n\t\tthis.kvstore = null\n\t\tthis.astman = null\n\t}\n\tconnect() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(this.connected) {\n\t\t\t\tresolve({\n\t\t\t\t\tconfig: this.config,\n\t\t\t\t\tdb: this.db,\n\t\t\t\t\tkvstore: this.kvstore,\n\t\t\t\t\tastman: this.astman,\n\t\t\t\t\tversion: this.version\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.exec(\n\t\t\t\t'php -r \\'$bootstrap_settings[\"skip_astman\"] = true; ' +\n\t\t\t\t'$restrict_mods = true; $bootstrap_settings[\"returnimmediately\"] = true; '+\n\t\t\t\t'include(\"/etc/freepbx.conf\"); print json_encode($amp_conf);\\''\n\t\t\t)\n\t\t\t.then(config => {\n\t\t\t\treturn this.databaseConnect({config})\n\t\t\t})\n\t\t\t.then(({config, db}) => {\n\t\t\t\treturn this.loadConfig({config, db})\n\t\t\t})\n\t\t\t.then(({config, db}) => {\n\t\t\t\treturn this.getPBXVersion({config, db})\n\t\t\t})\n\t\t\t.then(({config, db}) => {\n\t\t\t\treturn this.loadKVStore({config, db})\n\t\t\t})\n\t\t\t.then(({config, db, kvstore}) => {\n\t\t\t\treturn this.AMIConnect({config, db, kvstore})\n\t\t\t})\n\t\t\t.then(pbx => {\n\t\t\t\tthis.config = pbx.config\n\t\t\t\tthis.db = pbx.db\n\t\t\t\tthis.kvstore = pbx.kvstore\n\t\t\t\tthis.astman = pbx.astman\n\t\t\t\tthis.connected = true\n\t\t\t\tpbx.version = this.version\n\t\t\t\tresolve(pbx)\n\t\t\t})\n\t\t\t.catch(err => {\n        return reject(err)\n\t\t\t})\n\t\t})\n\t}\n\n\tdatabaseConnect({config}) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tlet connection = {};\n\t\t\tif(typeof config.AMPDBSOCK !== \"undefined\" && config.AMPDBSOCK.length) {\n\t\t\t\tconnection = mysql.createPool({\n\t\t\t\t\tconnectionLimit : 10,\n\t\t\t\t\tsocketPath : config.AMPDBSOCK,\n\t\t\t\t\tuser     : config.AMPDBUSER,\n\t\t\t\t\tpassword : config.AMPDBPASS,\n\t\t\t\t\tdatabase : config.AMPDBNAME,\n\t\t\t\t\tcharset: 'UTF8'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet port = (typeof config.AMPDBPORT !== \"undefined\" && config.AMPDBPORT.length) ? config.AMPDBPORT : 3306\n\t\t\t\tconnection = mysql.createPool({\n\t\t\t\t\tconnectionLimit : 10,\n\t\t\t\t\thost     : config.AMPDBHOST,\n\t\t\t\t\tport     : port,\n\t\t\t\t\tuser     : config.AMPDBUSER,\n\t\t\t\t\tpassword : config.AMPDBPASS,\n\t\t\t\t\tdatabase : config.AMPDBNAME,\n\t\t\t\t\tcharset: 'UTF8'\n\t\t\t\t});\n\t\t\t}\n\t\t\tresolve({config, db: connection});\n\t\t});\n\t}\n\n\tloadConfig({config, db}) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tlet confClass = new Conf(db)\n\t\t\tconfClass.load()\n\t\t\t.then((configs) => {\n\t\t\t\tconfigs.AMPDBHOST = config.AMPDBHOST\n\t\t\t\tconfigs.AMPDBUSER = config.AMPDBUSER\n\t\t\t\tconfigs.AMPDBPASS = config.AMPDBPASS\n\t\t\t\tconfigs.AMPDBNAME = config.AMPDBNAME\n\t\t\t\tconfigs.AMPDBSOCK = config.AMPDBSOCK\n\t\t\t\tresolve({config: confClass, db})\n\t\t\t}).catch((err) => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t})\n\t}\n\n\tloadKVStore({config, db}) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet kvstore = new Kvstore({db, version: this.version})\n\t\t\tresolve({config, db, kvstore})\n\t\t})\n\t}\n\n\tAMIConnect({config, db, kvstore}) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet astman = new asterisk_manager(\n\t\t\t\tconfig.configs.ASTMANAGERPORT,\n\t\t\t\tconfig.configs.ASTMANAGERHOST,\n\t\t\t\tconfig.configs.AMPMGRUSER,\n\t\t\t\tconfig.configs.AMPMGRPASS,\n\t\t\t\ttrue\n\t\t\t)\n\n\t\t\tastman.keepConnected();\n\n\t\t\tastman.on(\"connect\", (evt) => {\n\t\t\t\tresolve({config, db, kvstore, astman});\n\t\t\t});\n\n\t\t\tastman.on(\"error\", (evt) => {\n\t\t\t\treject(new Error(\"There was an error with Asterisk Manager Connection, is Asterisk running?\"));\n\t\t\t});\n\n\t\t\tastman.on(\"close\", (evt) => {\n\t\t\t\treject(new Error(\"There was an error with Asterisk Manager Connection is Asterisk running?\"));\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPBXVersion({config, db}) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdb.query(\"SELECT `value` FROM `admin` WHERE `variable` = 'version'\", (error, results, fields) => {\n\t\t\t\tif(error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\t\t\t\tthis.version = results[0].value\n\t\t\t\tresolve({config, db});\n\t\t\t});\n\t\t});\n\t}\n\n\texec(cmd) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tchild_process.exec(\n\t\t\t\tcmd,\n\t\t\t\t(err, stdout, stderr) => {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\treturn reject(err)\n\t\t\t\t\t} else if(stderr) {\n\t\t\t\t\t\treturn reject(new Error(stderr))\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlet config = JSON.parse(stdout);\n\t\t\t\t\t\t\treturn resolve(config)\n\t\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\t\treturn reject(err)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t})\n\t}\n}\n\nexport default new FreePBX()\n"]}