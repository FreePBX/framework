'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bluebird = require('bluebird');

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _version_compare = require('locutus/php/info/version_compare');

var _version_compare2 = _interopRequireDefault(_version_compare);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Kvstore = function () {
	function Kvstore(_ref) {
		var db = _ref.db,
		    version = _ref.version;

		_classCallCheck(this, Kvstore);

		this.db = db;
		this.version = (0, _version_compare2.default)(version, "14.0", "<") ? "13" : "14";
	}

	_createClass(Kvstore, [{
		key: 'getConfig',
		value: function getConfig(module) {
			var _this = this;

			var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'noid';

			return new _bluebird.Promise(function (resolve, reject) {
				var sql = void 0;
				var fields = [];
				if (_this.version != '13') {
					sql = 'SELECT * FROM ?? WHERE `key` = ? AND `id` = ?';
					fields = ['kvstore_' + module.split('\\').join('_'), key, id];
				} else {
					sql = 'SELECT * FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?';
					fields = [module, key, id];
				}
				_this.query(sql, fields).then(function (results) {
					if (typeof results[0] === "undefined") {
						return _bluebird.Promise.resolve(false);
					} else {
						return _this.parseResult(results[0]);
					}
				}).then(function (result) {
					resolve(result);
				}).catch(function (err) {
					resolve(false);
				});
			});
		}
	}, {
		key: 'getAllConfig',
		value: function getAllConfig(module) {
			var _this2 = this;

			return new _bluebird.Promise(function (resolve, reject) {
				var sql = void 0;
				var fields = [];
				if (_this2.version != '13') {
					sql = 'SELECT * FROM ??';
					fields = ['kvstore_' + module.split('\\').join('_')];
				} else {
					sql = 'SELECT * FROM `kvstore` WHERE `module` = ?';
					fields = [module];
				}
				_this2.query(sql, fields).then(function (results) {
					var settings = {};
					_async2.default.each(results, function (row, callback) {
						_this2.parseResult(row).then(function (res) {
							settings[row.key] = res;
							callback();
						}).catch(function (err) {
							callback(err);
						});
					}, function (err) {
						if (err) {
							return reject(err);
						}
						resolve(settings);
					});
					//http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-was-not-returned-from-it
					return null;
				}).catch(function (err) {
					resolve([]);
				});
			});
		}
	}, {
		key: 'setConfig',
		value: function setConfig(module) {
			var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			var _this3 = this;

			var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
			var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'noid';

			return new _bluebird.Promise(function (resolve, reject) {
				var type = null;
				if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === "object") {
					type = 'json-arr';
					value = JSON.stringify(value);
				} else if (typeof value === "boolean") {
					value = value ? 1 : 0;
				}
				if (_this3.version != '13') {
					if (value.length > 4000) {
						_this3.query('SELECT * FROM ?? WHERE `key` = ? AND `id` = ?', ['kvstore_' + module.split('\\').join('_'), key, id]).then(function (results) {
							if (results.length) {
								return _this3.deleteBlob(results[0].val);
							} else {
								return _bluebird.Promise.resolve(null);
							}
						}).then(function (result) {
							if (result) {
								return _this3.query('DELETE FROM ?? WHERE `key` = ? AND `id` = ?', ['kvstore_' + module.split('\\').join('_'), key, id]);
							} else {
								return _bluebird.Promise.resolve(null);
							}
						}).then(function (result) {
							return _this3.insertBlob(value, type);
						}).then(function (uid) {
							return _this3.query('REPLACE INTO ?? (`key`,`val`,`type`,`id`) VALUES (?,?,?,?)', ['kvstore_' + module.split('\\').join('_'), key, uid, 'blob', id]);
						}).then(function (results) {
							resolve(results.affectedRows);
						}).catch(function (error) {
							reject(error);
						});
					} else {
						_this3.query('REPLACE INTO ?? (`key`,`val`,`type`,`id`) VALUES (?,?,?,?)', ['kvstore_' + module.split('\\').join('_'), key, value, type, id]).then(function (results) {
							resolve(results.affectedRows);
						}).catch(function (error) {
							reject(error);
						});
					}
				} else {
					_this3.query('REPLACE INTO `kvstore` (`module`,`key`,`val`,`type`,`id`) VALUES (?,?,?,?,?)', [module, key, value, type, id]).then(function (results) {
						resolve(results.affectedRows);
					}).catch(function (error) {
						reject(error);
					});
				}
			});
		}
	}, {
		key: 'deleteBlob',
		value: function deleteBlob() {
			var _this4 = this;

			var uuid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

			return new _bluebird.Promise(function (resolve, reject) {
				if (!uuid) {
					return reject(new Error("No uuid"));
				}
				_this4.query('DELETE FROM `kvblobstore` WHERE `uuid`= ?', [uuid]).then(function (results) {
					resolve(true);
				}).catch(function (error) {
					if (error.sqlState == "42S02") {
						return _this4.createKvblobstore().then(function (r) {
							resolve(true);
						}).catch(function (error) {
							reject(error);
						});
					} else {
						reject(error);
					}
				});
			});
		}
	}, {
		key: 'getBlob',
		value: function getBlob() {
			var _this5 = this;

			var uuid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

			return new _bluebird.Promise(function (resolve, reject) {
				if (!uuid) {
					return reject(new Error("No uuid"));
				}
				_this5.query('SELECT * FROM `kvblobstore` WHERE `uuid`=?', [uuid]).then(function (results) {
					if (!results[0]) {
						resolve({
							"content": "",
							"type": false
						});
					} else {
						resolve({
							"content": results[0].content,
							"type": results[0].type
						});
					}
				}).catch(function (error) {
					if (error.sqlState == "42S02") {
						_this5.createKvblobstore().then(function (r) {
							resolve({
								"content": "",
								"type": false
							});
						}).catch(function (error) {
							reject(error);
						});
					} else {
						reject(error);
					}
				});
			});
		}
	}, {
		key: 'insertBlob',
		value: function insertBlob() {
			var _this6 = this;

			var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
			var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "raw";

			return new _bluebird.Promise(function (resolve, reject) {
				if (!val) {
					return reject(new Error("No val"));
				}
				var id = (0, _v2.default)();
				// Try to insert our value
				_this6.query('INSERT INTO `kvblobstore` (`uuid`, `type`, `content`) VALUES (?, ?, ?)', [id, type, val]).then(function (results) {
					resolve(id);
				}).catch(function (error) {
					if (error.sqlState == "42S02") {
						_this6.createKvblobstore().then(function (r) {
							_this6.insertBlob(val, type);
						}).then(function (iid) {
							resolve(iid);
						}).catch(function (error) {
							reject(error);
						});
					} else {
						reject(error);
					}
				});
			});
		}
	}, {
		key: 'createKvblobstore',
		value: function createKvblobstore() {
			var _this7 = this;

			return new _bluebird.Promise(function (resolve, reject) {
				_this7.query('CREATE TABLE `kvblobstore` ( `uuid` CHAR(36) PRIMARY KEY, `type` CHAR(32), `content` LONGBLOB )').then(function (results) {
					resolve(true);
				}).catch(function (error) {
					reject(error);
				});
			});
		}
	}, {
		key: 'delConfig',
		value: function delConfig(module) {
			var _this8 = this;

			var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'noid';

			return new _bluebird.Promise(function (resolve, reject) {
				if (_this8.version != '13') {
					_this8.query('SELECT * FROM ?? WHERE `key` = ? AND `id` = ?', ['kvstore_' + module.split('\\').join('_'), key, id]).then(function (results) {
						if (results.length > 1) {
							return _this8.deleteBlob(results[0].val);
						} else {
							return _bluebird.Promise.resolve(null);
						}
					}).then(function (result) {
						return _this8.query('DELETE FROM ?? WHERE `key` = ? AND `id` = ?', ['kvstore_' + module.split('\\').join('_'), key, id]);
					}).then(function (res) {
						resolve(true);
					}).catch(function (error) {
						reject(error);
					});
				} else {
					_this8.query('DELETE FROM `kvstore` WHERE `module` = ? AND `key` = ? AND `id` = ?', [module, key, id]).then(function (results) {
						resolve(true);
					}).catch(function (error) {
						reject(error);
					});
				}
			});
		}
	}, {
		key: 'parseResult',
		value: function parseResult(result) {
			var _this9 = this;

			return new _bluebird.Promise(function (resolve, reject) {
				switch (result.type) {
					case 'json-arr':
						try {
							resolve(JSON.parse(result.val));
						} catch (err) {
							resolve(result.val.toString('utf8'));
						}
						break;
					case 'blob':
						var id = result.val.toString('utf8');
						_this9.getBlob(id).then(function (result) {
							if (result.type == 'json-arr') {
								try {
									resolve(JSON.parse(result.content));
								} catch (err) {
									resolve(result.content.toString('utf8'));
								}
							} else {
								resolve(result.content.toString('utf8'));
							}
						}).catch(function (error) {
							reject(error);
						});
						break;
					default:
						resolve(result.val.toString('utf8'));
						break;
				}
			});
		}
	}, {
		key: 'query',
		value: function query(sql) {
			var _this10 = this;

			var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

			return new _bluebird.Promise(function (resolve, reject) {
				_this10.db.query(sql, fields, function (error, results, fields) {
					if (error) {
						return reject(error);
					}
					resolve(results);
				});
			});
		}
	}]);

	return Kvstore;
}();

exports.default = Kvstore;
//# sourceMappingURL=Kvstore.js.map
