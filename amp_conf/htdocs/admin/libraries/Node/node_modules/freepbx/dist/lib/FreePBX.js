'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.FreePBX = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint node:true, newcap:false */


var _mysql = require('mysql');

var _mysql2 = _interopRequireDefault(_mysql);

var _bluebird = require('bluebird');

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _Conf = require('./Conf');

var _Conf2 = _interopRequireDefault(_Conf);

var _Kvstore = require('./Kvstore');

var _Kvstore2 = _interopRequireDefault(_Kvstore);

var _asteriskManager = require('asterisk-manager');

var _asteriskManager2 = _interopRequireDefault(_asteriskManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FreePBX = exports.FreePBX = function () {
	function FreePBX() {
		_classCallCheck(this, FreePBX);

		this.version = null;
		this.connected = false;
		this.config = null;
		this.db = null;
		this.kvstore = null;
		this.astman = null;
	}

	_createClass(FreePBX, [{
		key: 'connect',
		value: function connect() {
			var _this = this;

			return new _bluebird.Promise(function (resolve, reject) {
				if (_this.connected) {
					resolve({
						config: _this.config,
						db: _this.db,
						kvstore: _this.kvstore,
						astman: _this.astman,
						version: _this.version
					});
					return;
				}
				_this.exec('php -r \'$bootstrap_settings["skip_astman"] = true; ' + '$restrict_mods = true; $bootstrap_settings["returnimmediately"] = true; ' + 'include("/etc/freepbx.conf"); print json_encode($amp_conf);\'').then(function (config) {
					return _this.databaseConnect({ config: config });
				}).then(function (_ref) {
					var config = _ref.config,
					    db = _ref.db;

					return _this.loadConfig({ config: config, db: db });
				}).then(function (_ref2) {
					var config = _ref2.config,
					    db = _ref2.db;

					return _this.getPBXVersion({ config: config, db: db });
				}).then(function (_ref3) {
					var config = _ref3.config,
					    db = _ref3.db;

					return _this.loadKVStore({ config: config, db: db });
				}).then(function (_ref4) {
					var config = _ref4.config,
					    db = _ref4.db,
					    kvstore = _ref4.kvstore;

					return _this.AMIConnect({ config: config, db: db, kvstore: kvstore });
				}).then(function (pbx) {
					_this.config = pbx.config;
					_this.db = pbx.db;
					_this.kvstore = pbx.kvstore;
					_this.astman = pbx.astman;
					_this.connected = true;
					pbx.version = _this.version;
					resolve(pbx);
				}).catch(function (err) {
					return reject(err);
				});
			});
		}
	}, {
		key: 'databaseConnect',
		value: function databaseConnect(_ref5) {
			var config = _ref5.config;

			return new _bluebird.Promise(function (resolve, reject) {
				var connection = {};
				if (typeof config.AMPDBSOCK !== "undefined" && config.AMPDBSOCK.length) {
					connection = _mysql2.default.createPool({
						connectionLimit: 10,
						socketPath: config.AMPDBSOCK,
						user: config.AMPDBUSER,
						password: config.AMPDBPASS,
						database: config.AMPDBNAME,
						charset: 'UTF8'
					});
				} else {
					var port = typeof config.AMPDBPORT !== "undefined" && config.AMPDBPORT.length ? config.AMPDBPORT : 3306;
					connection = _mysql2.default.createPool({
						connectionLimit: 10,
						host: config.AMPDBHOST,
						port: port,
						user: config.AMPDBUSER,
						password: config.AMPDBPASS,
						database: config.AMPDBNAME,
						charset: 'UTF8'
					});
				}
				resolve({ config: config, db: connection });
			});
		}
	}, {
		key: 'loadConfig',
		value: function loadConfig(_ref6) {
			var config = _ref6.config,
			    db = _ref6.db;

			return new _bluebird.Promise(function (resolve, reject) {
				var confClass = new _Conf2.default(db);
				confClass.load().then(function (configs) {
					configs.AMPDBHOST = config.AMPDBHOST;
					configs.AMPDBUSER = config.AMPDBUSER;
					configs.AMPDBPASS = config.AMPDBPASS;
					configs.AMPDBNAME = config.AMPDBNAME;
					configs.AMPDBSOCK = config.AMPDBSOCK;
					resolve({ config: confClass, db: db });
				}).catch(function (err) {
					reject(err);
				});
			});
		}
	}, {
		key: 'loadKVStore',
		value: function loadKVStore(_ref7) {
			var _this2 = this;

			var config = _ref7.config,
			    db = _ref7.db;

			return new _bluebird.Promise(function (resolve, reject) {
				var kvstore = new _Kvstore2.default({ db: db, version: _this2.version });
				resolve({ config: config, db: db, kvstore: kvstore });
			});
		}
	}, {
		key: 'AMIConnect',
		value: function AMIConnect(_ref8) {
			var config = _ref8.config,
			    db = _ref8.db,
			    kvstore = _ref8.kvstore;

			return new _bluebird.Promise(function (resolve, reject) {
				var astman = new _asteriskManager2.default(config.configs.ASTMANAGERPORT, config.configs.ASTMANAGERHOST, config.configs.AMPMGRUSER, config.configs.AMPMGRPASS, true);

				astman.keepConnected();

				astman.on("connect", function (evt) {
					resolve({ config: config, db: db, kvstore: kvstore, astman: astman });
				});

				astman.on("error", function (evt) {
					reject(new Error("There was an error with Asterisk Manager Connection, is Asterisk running?"));
				});

				astman.on("close", function (evt) {
					reject(new Error("There was an error with Asterisk Manager Connection is Asterisk running?"));
				});
			});
		}
	}, {
		key: 'getPBXVersion',
		value: function getPBXVersion(_ref9) {
			var _this3 = this;

			var config = _ref9.config,
			    db = _ref9.db;

			return new _bluebird.Promise(function (resolve, reject) {
				db.query("SELECT `value` FROM `admin` WHERE `variable` = 'version'", function (error, results, fields) {
					if (error) {
						return reject(error);
					}
					_this3.version = results[0].value;
					resolve({ config: config, db: db });
				});
			});
		}
	}, {
		key: 'exec',
		value: function exec(cmd) {
			return new _bluebird.Promise(function (resolve, reject) {
				_child_process2.default.exec(cmd, function (err, stdout, stderr) {
					if (err) {
						return reject(err);
					} else if (stderr) {
						return reject(new Error(stderr));
					} else {
						try {
							var config = JSON.parse(stdout);
							return resolve(config);
						} catch (err) {
							return reject(err);
						}
					}
				});
			});
		}
	}]);

	return FreePBX;
}();

exports.default = new FreePBX();
//# sourceMappingURL=FreePBX.js.map
