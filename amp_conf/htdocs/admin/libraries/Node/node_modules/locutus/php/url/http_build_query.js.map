{"version":3,"sources":["../../../src/php/url/http_build_query.js"],"names":["module","exports","http_build_query","formdata","numericPrefix","argSeparator","encType","encodeFunc","require","value","key","tmp","_httpBuildQueryHelper","val","k","push","join","Error","isNaN","String","query"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,gBAAT,CAA2BC,QAA3B,EAAqCC,aAArC,EAAoDC,YAApD,EAAkEC,OAAlE,EAA2E;AAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAJ;;AAEA,UAAQD,OAAR;AACE,SAAK,mBAAL;AACEC,mBAAaC,QAAQ,qBAAR,CAAb;AACA;;AAEF,SAAK,mBAAL;AACA;AACED,mBAAaC,QAAQ,kBAAR,CAAb;AACA;AARJ;;AAWA,MAAIC,KAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,MAAM,EAAV;;AAEA,MAAIC,wBAAwB,SAAxBA,qBAAwB,CAAUF,GAAV,EAAeG,GAAf,EAAoBR,YAApB,EAAkC;AAC5D,QAAIS,CAAJ;AACA,QAAIH,MAAM,EAAV;AACA,QAAIE,QAAQ,IAAZ,EAAkB;AAChBA,YAAM,GAAN;AACD,KAFD,MAEO,IAAIA,QAAQ,KAAZ,EAAmB;AACxBA,YAAM,GAAN;AACD;AACD,QAAIA,QAAQ,IAAZ,EAAkB;AAChB,UAAI,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B;AAC3B,aAAKC,CAAL,IAAUD,GAAV,EAAe;AACb,cAAIA,IAAIC,CAAJ,MAAW,IAAf,EAAqB;AACnBH,gBAAII,IAAJ,CAASH,sBAAsBF,MAAM,GAAN,GAAYI,CAAZ,GAAgB,GAAtC,EAA2CD,IAAIC,CAAJ,CAA3C,EAAmDT,YAAnD,CAAT;AACD;AACF;AACD,eAAOM,IAAIK,IAAJ,CAASX,YAAT,CAAP;AACD,OAPD,MAOO,IAAI,OAAOQ,GAAP,KAAe,UAAnB,EAA+B;AACpC,eAAON,WAAWG,GAAX,IAAkB,GAAlB,GAAwBH,WAAWM,GAAX,CAA/B;AACD,OAFM,MAEA;AACL,cAAM,IAAII,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF,KAbD,MAaO;AACL,aAAO,EAAP;AACD;AACF,GAxBD;;AA0BA,MAAI,CAACZ,YAAL,EAAmB;AACjBA,mBAAe,GAAf;AACD;AACD,OAAKK,GAAL,IAAYP,QAAZ,EAAsB;AACpBM,YAAQN,SAASO,GAAT,CAAR;AACA,QAAIN,iBAAiB,CAACc,MAAMR,GAAN,CAAtB,EAAkC;AAChCA,YAAMS,OAAOf,aAAP,IAAwBM,GAA9B;AACD;AACD,QAAIU,QAAQR,sBAAsBF,GAAtB,EAA2BD,KAA3B,EAAkCJ,YAAlC,CAAZ;AACA,QAAIe,UAAU,EAAd,EAAkB;AAChBT,UAAII,IAAJ,CAASK,KAAT;AACD;AACF;;AAED,SAAOT,IAAIK,IAAJ,CAASX,YAAT,CAAP;AACD,CA/ED","file":"http_build_query.js","sourcesContent":["module.exports = function http_build_query (formdata, numericPrefix, argSeparator, encType) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/http_build_query/\n  // original by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Legaev Andrey\n  // improved by: Michael White (http://getsprink.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //  revised by: stag019\n  //    input by: Dreamer\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/)\n  // improved by: Will Rowe\n  //      note 1: If the value is null, key and value are skipped in the\n  //      note 1: http_build_query of PHP while in locutus they are not.\n  //   example 1: http_build_query({foo: 'bar', php: 'hypertext processor', baz: 'boom', cow: 'milk'}, '', '&amp;')\n  //   returns 1: 'foo=bar&amp;php=hypertext+processor&amp;baz=boom&amp;cow=milk'\n  //   example 2: http_build_query({'php': 'hypertext processor', 0: 'foo', 1: 'bar', 2: 'baz', 3: 'boom', 'cow': 'milk'}, 'myvar_')\n  //   returns 2: 'myvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_3=boom&php=hypertext+processor&cow=milk'\n  //   example 3: http_build_query({foo: 'bar', php: 'hypertext processor', baz: 'boom', cow: 'milk'}, '', '&amp;', 'PHP_QUERY_RFC3986')\n  //   returns 3: 'foo=bar&amp;php=hypertext%20processor&amp;baz=boom&amp;cow=milk'\n\n  var encodeFunc\n\n  switch (encType) {\n    case 'PHP_QUERY_RFC3986':\n      encodeFunc = require('../url/rawurlencode')\n      break\n\n    case 'PHP_QUERY_RFC1738':\n    default:\n      encodeFunc = require('../url/urlencode')\n      break\n  }\n\n  var value\n  var key\n  var tmp = []\n\n  var _httpBuildQueryHelper = function (key, val, argSeparator) {\n    var k\n    var tmp = []\n    if (val === true) {\n      val = '1'\n    } else if (val === false) {\n      val = '0'\n    }\n    if (val !== null) {\n      if (typeof val === 'object') {\n        for (k in val) {\n          if (val[k] !== null) {\n            tmp.push(_httpBuildQueryHelper(key + '[' + k + ']', val[k], argSeparator))\n          }\n        }\n        return tmp.join(argSeparator)\n      } else if (typeof val !== 'function') {\n        return encodeFunc(key) + '=' + encodeFunc(val)\n      } else {\n        throw new Error('There was an error processing for http_build_query().')\n      }\n    } else {\n      return ''\n    }\n  }\n\n  if (!argSeparator) {\n    argSeparator = '&'\n  }\n  for (key in formdata) {\n    value = formdata[key]\n    if (numericPrefix && !isNaN(key)) {\n      key = String(numericPrefix) + key\n    }\n    var query = _httpBuildQueryHelper(key, value, argSeparator)\n    if (query !== '') {\n      tmp.push(query)\n    }\n  }\n\n  return tmp.join(argSeparator)\n}\n"]}