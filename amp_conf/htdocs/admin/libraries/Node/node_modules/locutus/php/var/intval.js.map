{"version":3,"sources":["../../../src/php/var/intval.js"],"names":["module","exports","intval","mixedVar","base","tmp","match","type","parseInt","isNaN","isFinite","Math","ceil","floor"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,GAAJ,EAASC,KAAT;;AAEA,MAAIC,cAAcJ,QAAd,yCAAcA,QAAd,CAAJ;;AAEA,MAAII,SAAS,SAAb,EAAwB;AACtB,WAAO,CAACJ,QAAR;AACD,GAFD,MAEO,IAAII,SAAS,QAAb,EAAuB;AAC5B,QAAIH,SAAS,CAAb,EAAgB;AACdE,cAAQH,SAASG,KAAT,CAAe,YAAf,CAAR;AACAF,aAAOE,QAASA,MAAM,CAAN,IAAW,EAAX,GAAgB,CAAzB,GAA8B,EAArC;AACD;AACDD,UAAMG,SAASL,QAAT,EAAmBC,QAAQ,EAA3B,CAAN;AACA,WAAQK,MAAMJ,GAAN,KAAc,CAACK,SAASL,GAAT,CAAhB,GAAiC,CAAjC,GAAqCA,GAA5C;AACD,GAPM,MAOA,IAAIE,SAAS,QAAT,IAAqBG,SAASP,QAAT,CAAzB,EAA6C;AAClD,WAAOA,WAAW,CAAX,GAAeQ,KAAKC,IAAL,CAAUT,QAAV,CAAf,GAAqCQ,KAAKE,KAAL,CAAWV,QAAX,CAA5C;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF,CA3CD","file":"intval.js","sourcesContent":["module.exports = function intval (mixedVar, base) {\n  //  discuss at: http://locutus.io/php/intval/\n  // original by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: stensi\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: Rafa≈Ç Kukawski (http://blog.kukawski.pl)\n  //    input by: Matteo\n  //   example 1: intval('Kevin van Zonneveld')\n  //   returns 1: 0\n  //   example 2: intval(4.2)\n  //   returns 2: 4\n  //   example 3: intval(42, 8)\n  //   returns 3: 42\n  //   example 4: intval('09')\n  //   returns 4: 9\n  //   example 5: intval('1e', 16)\n  //   returns 5: 30\n  //   example 6: intval(0x200000001)\n  //   returns 6: 8589934593\n  //   example 7: intval('0xff', 0)\n  //   returns 7: 255\n  //   example 8: intval('010', 0)\n  //   returns 8: 8\n\n  var tmp, match\n\n  var type = typeof mixedVar\n\n  if (type === 'boolean') {\n    return +mixedVar\n  } else if (type === 'string') {\n    if (base === 0) {\n      match = mixedVar.match(/^\\s*0(x?)/i)\n      base = match ? (match[1] ? 16 : 8) : 10\n    }\n    tmp = parseInt(mixedVar, base || 10)\n    return (isNaN(tmp) || !isFinite(tmp)) ? 0 : tmp\n  } else if (type === 'number' && isFinite(mixedVar)) {\n    return mixedVar < 0 ? Math.ceil(mixedVar) : Math.floor(mixedVar)\n  } else {\n    return 0\n  }\n}\n"]}