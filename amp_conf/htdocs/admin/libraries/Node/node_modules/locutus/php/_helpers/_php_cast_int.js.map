{"version":3,"sources":["../../../src/php/_helpers/_php_cast_int.js"],"names":["module","exports","_php_cast_int","value","type","isNaN","isFinite","Math","ceil","floor","parseInt"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiB,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,cAAcD,KAAd,yCAAcA,KAAd,CAAJ;;AAEA,UAAQC,IAAR;AACE,SAAK,QAAL;AACE,UAAIC,MAAMF,KAAN,KAAgB,CAACG,SAASH,KAAT,CAArB,EAAsC;AACpC;AACA,eAAO,CAAP;AACD;;AAED,aAAOA,QAAQ,CAAR,GAAYI,KAAKC,IAAL,CAAUL,KAAV,CAAZ,GAA+BI,KAAKE,KAAL,CAAWN,KAAX,CAAtC;AACF,SAAK,QAAL;AACE,aAAOO,SAASP,KAAT,EAAgB,EAAhB,KAAuB,CAA9B;AACF,SAAK,SAAL;AACE;AACF;AACE;AACA;AACA;AACA;AACA;AACA,aAAO,CAAC,CAAC,CAACA,KAAV;AAlBJ;AAoBD,CAnDD","file":"_php_cast_int.js","sourcesContent":["module.exports = function _php_cast_int (value) { // eslint-disable-line camelcase\n  // original by: Rafa≈Ç Kukawski\n  //   example 1: _php_cast_int(false)\n  //   returns 1: 0\n  //   example 2: _php_cast_int(true)\n  //   returns 2: 1\n  //   example 3: _php_cast_int(0)\n  //   returns 3: 0\n  //   example 4: _php_cast_int(1)\n  //   returns 4: 1\n  //   example 5: _php_cast_int(3.14)\n  //   returns 5: 3\n  //   example 6: _php_cast_int('')\n  //   returns 6: 0\n  //   example 7: _php_cast_int('0')\n  //   returns 7: 0\n  //   example 8: _php_cast_int('abc')\n  //   returns 8: 0\n  //   example 9: _php_cast_int(null)\n  //   returns 9: 0\n  //  example 10: _php_cast_int(undefined)\n  //  returns 10: 0\n  //  example 11: _php_cast_int('123abc')\n  //  returns 11: 123\n  //  example 12: _php_cast_int('123e4')\n  //  returns 12: 123\n  //  example 13: _php_cast_int(0x200000001)\n  //  returns 13: 8589934593\n\n  var type = typeof value\n\n  switch (type) {\n    case 'number':\n      if (isNaN(value) || !isFinite(value)) {\n        // from PHP 7, NaN and Infinity are casted to 0\n        return 0\n      }\n\n      return value < 0 ? Math.ceil(value) : Math.floor(value)\n    case 'string':\n      return parseInt(value, 10) || 0\n    case 'boolean':\n      // fall through\n    default:\n      // Behaviour for types other than float, string, boolean\n      // is undefined and can change any time.\n      // To not invent complex logic\n      // that mimics PHP 7.0 behaviour\n      // casting value->bool->number is used\n      return +!!value\n  }\n}\n"]}