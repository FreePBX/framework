BMO/Ajax.class.php:			$file = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/libraries/BMO/Framework.class.php";
BMO/Ajax.class.php:			$file = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/libraries/BMO/Search.class.php";
BMO/Ajax.class.php:			$file = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/$module/$ucMod.class.php";
BMO/Ajax.class.php:		if($this->settings['allowremote'] !== true && $this->freepbx->Config->get('CHECKREFERER')) {
BMO/ConfigFile.class.php:			$myconfig = $this->config->ProcessedConfig;
BMO/ConfigFile.class.php:		if (!isset($this->config->ProcessedConfig[$section])) {
BMO/ConfigFile.class.php:		if (isset($this->config->ProcessedConfig[$section][$key]) && is_array($this->config->ProcessedConfig[$section][$key])) {
BMO/ConfigFile.class.php:			$this->config->ProcessedConfig[$section][$key] = array_filter(
BMO/ConfigFile.class.php:				$this->config->ProcessedConfig[$section][$key],
BMO/ConfigFile.class.php:			if (count($this->config->ProcessedConfig[$section][$key]) == 0) {
BMO/ConfigFile.class.php:				unset($this->config->ProcessedConfig[$section][$key]);
BMO/ConfigFile.class.php:		} elseif (isset($this->config->ProcessedConfig[$section][$key])) {
BMO/ConfigFile.class.php:			if ($val == null || $this->config->ProcessedConfig[$section][$key] == $val) {
BMO/ConfigFile.class.php:				unset($this->config->ProcessedConfig[$section][$key]);
BMO/ConfigFile.class.php:		if (count($this->config->ProcessedConfig[$section]) == 0) {
BMO/ConfigFile.class.php:			unset($this->config->ProcessedConfig[$section]);
BMO/ConfigFile.class.php:		if (!isset($this->config->ProcessedConfig[$section][$key])) {
BMO/ConfigFile.class.php:			$this->config->ProcessedConfig[$section][$key] = $val;
BMO/ConfigFile.class.php:		if (is_array($this->config->ProcessedConfig[$section][$key])) {
BMO/ConfigFile.class.php:			$this->config->ProcessedConfig[$section][$key][] = $val;
BMO/ConfigFile.class.php:		$tmpvar = $this->config->ProcessedConfig[$section][$key];
BMO/ConfigFile.class.php:		unset($this->config->ProcessedConfig[$section][$key]);
BMO/ConfigFile.class.php:		$this->config->ProcessedConfig[$section][$key][] = $tmpvar;
BMO/ConfigFile.class.php:		$this->config->ProcessedConfig[$section][$key][] = $val;
BMO/ConfigFile.class.php:		$this->FreePBX->WriteConfig(array($this->file => $this->config->ProcessedConfig));
BMO/Database/Migration.class.php:			$schemaConfig->setDefaultTableOptions(array(
BMO/FileHooks.class.php:							$this->FreePBX->WriteConfig->writeConfig($modconf,$module->generateConf($modconf),$generateHeader);
BMO/FileHooks.class.php:							$this->FreePBX->WriteConfig->writeConfig($module->get_filename(), $module->generateConf(),$generateHeader);
BMO/Unlock.class.php:		if (!$this->Config->get_conf_setting('REMOTEUNLOCK')) {
BMO/Unlock.class.php:		if (!$this->Config->get_conf_setting('REMOTEUNLOCK')) {
BMO/Job.class.php:		$ampbin = $this->freepbx->Config->get('AMPSBIN');
BMO/Job.class.php:		$sleeptime = $this->freepbx->Config->get_conf_setting('JOBSRANDOMSLEEP');
BMO/Less.class.php:		$less_path = $this->FreePBX->Config->get('AMPWEBROOT') .'/admin/assets/less';
BMO/Less.class.php:		$less_path = $this->FreePBX->Config->get('AMPWEBROOT') . '/admin/modules/' . $module . '/assets/less';
BMO/Less.class.php:			$ampowner = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
BMO/Less.class.php:			$ampgroup =  $ampowner != $this->FreePBX->Config->get('AMPASTERISKUSER') ? $this->FreePBX->Config->get('AMPASTERISKGROUP') : $ampowner;
BMO/Less.class.php:			$ampowner = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
BMO/Less.class.php:			$ampgroup =  $ampowner != $this->FreePBX->Config->get('AMPASTERISKUSER') ? $this->FreePBX->Config->get('AMPASTERISKGROUP') : $ampowner;
BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
BMO/ModulesConf.class.php:		$this->ProcessedConfig =& $this->conf->config->ProcessedConfig;
BMO/ModulesConf.class.php:		$current = $this->conf->config->ProcessedConfig['modules'];
BMO/ModulesConf.class.php:		$current = $this->conf->config->ProcessedConfig['modules'];
BMO/ModulesConf.class.php:		$current = $this->conf->config->ProcessedConfig['modules'];
BMO/View.class.php:		$package = $this->freepbx->Config->get('USE_PACKAGED_JS');
BMO/View.class.php:			$jspath = $this->freepbx->Config->get('AMPWEBROOT') .'/admin/assets/js';
BMO/View.class.php:		$freepbxtimezone = $this->freepbx->Config->get('PHPTIMEZONE');
BMO/View.class.php:			//$format = (php_sapi_name() !== 'cli' && !empty($_SESSION['AMP_user']->dateformat)) ? $_SESSION['AMP_user']->dateformat : $this->freepbx->Config->get("MDATEFORMAT");
BMO/View.class.php:			$format = !empty($this->dateformat) ? $this->dateformat : $this->freepbx->Config->get("MDATEFORMAT");
BMO/View.class.php:			//$format = (php_sapi_name() !== 'cli' && !empty($_SESSION['AMP_user']->timeformat)) ? $_SESSION['AMP_user']->timeformat : $this->freepbx->Config->get("MTIMEFORMAT");
BMO/View.class.php:			$format = !empty($this->timeformat) ? $this->timeformat : $this->freepbx->Config->get("MTIMEFORMAT");
BMO/View.class.php:			//$format = (php_sapi_name() !== 'cli' && !empty($_SESSION['AMP_user']->datetimeformat)) ? $_SESSION['AMP_user']->datetimeformat : $this->freepbx->Config->get("MDATETIMEFORMAT");
BMO/View.class.php:			$format = !empty($this->datetimeformat) ? $this->datetimeformat : $this->freepbx->Config->get("MDATETIMEFORMAT");
BMO/View.class.php:		$UIDEFAULTLANG = $this->freepbx->Config->get("UIDEFAULTLANG");
BMO/View.class.php:		bindtextdomain('amp',$this->freepbx->Config->get("AMPWEBROOT").'/admin/i18n');
BMO/View.class.php:		foreach(glob($this->freepbx->Config->get("AMPWEBROOT")."/admin/i18n/*",GLOB_ONLYDIR) as $langDir) {
BMO/Extensions.class.php:		if (!$this->FreePBX->Config->get('AGGRESSIVE_DUPLICATE_CHECK') && !$force) {
BMO/Mail.class.php:		//$brand = $this->freepbx->Config->get('DASHBOARD_FREEPBX_BRAND');
BMO/Mail.class.php:		$ident = $this->freepbx->Config->get('FREEPBX_SYSTEM_IDENT');
BMO/Realtime.class.php:			if (isset($current->config->ProcessedConfig['settings']['queue_log'])) {
BMO/Realtime.class.php:				unset($current->config->ProcessedConfig['settings']['queue_log']);
BMO/Realtime.class.php:			if (!isset($current->config->ProcessedConfig['settings'])) {
BMO/Realtime.class.php:			if (!isset($current->config->ProcessedConfig['settings']['queue_log'])) {
BMO/WriteConfig.class.php:		$dir = $this->freepbx->Config->get('ASTETCDIR');
BMO/WriteConfig.class.php:		$AMPASTERISKWEBUSER = $this->freepbx->Config->get("AMPASTERISKWEBUSER");
BMO/WriteConfig.class.php:		$AMPASTERISKWEBGROUP = $this->freepbx->Config->get("AMPASTERISKWEBGROUP");
BMO/WriteConfig.class.php:		$AMPASTERISKUSER = $this->freepbx->Config->get("AMPASTERISKUSER");
BMO/WriteConfig.class.php:		$AMPASTERISKGROUP = $this->freepbx->Config->get("AMPASTERISKGROUP");
BMO/Cache.class.php:					$cachePath = $this->freepbx->Config->get('ASTSPOOLDIR')."/cache";
BMO/Cache.class.php:						$user = $this->freepbx->Config->get('AMPASTERISKWEBUSER');
BMO/Cache.class.php:						$group = $this->freepbx->Config->get('AMPASTERISKWEBGROUP');
BMO/Database.class.php:		$dbuser = $this->FreePBX->Config->get('AMPDBUSER') ? $this->FreePBX->Config->get('AMPDBUSER'):$amp_conf['AMPDBUSER'];
BMO/Database.class.php:		$dbpass = $this->FreePBX->Config->get('AMPDBPASS') ? $this->FreePBX->Config->get('AMPDBPASS'):$amp_conf['AMPDBPASS'];
BMO/Database.class.php:		$dbname = $this->FreePBX->Config->get('AMPDBNAME') ? $this->FreePBX->Config->get('AMPDBNAME') : 'asterisk';
BMO/Framework.class.php:		$AMPSBIN = $this->freepbx->Config->get('AMPSBIN');
BMO/Framework.class.php:			$this->freepbx->Config->update('AMPSBIN',dirname($out));
BMO/Framework.class.php:		$ASTETCDIR = $this->freepbx->Config->get('ASTETCDIR');
BMO/Framework.class.php:			$AMPMGRUSER = $this->freepbx->Config->get('AMPMGRUSER');
BMO/Framework.class.php:			$AMPMGRPASS = $this->freepbx->Config->get('AMPMGRPASS');
BMO/Framework.class.php:			$ASTMGRWRITETIMEOUT = $this->freepbx->Config->get('ASTMGRWRITETIMEOUT');
BMO/Framework.class.php:		if (!$this->freepbx->astman || !$res = $this->freepbx->astman->connect($this->freepbx->Config->get('ASTMANAGERHOST') . ":" . $this->freepbx->Config->get('ASTMANAGERPORT'), $this->freepbx->Config->get('AMPMGRUSER') , $this->freepbx->Config->get('AMPMGRPASS'), $bootstrap_settings['astman_events'])) {
BMO/Hooks.class.php:		$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
BMO/Hooks.class.php:			$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
BMO/Hooks.class.php:		$spooldir = $this->FreePBX->Config->get('ASTSPOOLDIR');
BMO/Hooks.class.php:		$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
BMO/Self_Helper.class.php:			$path = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
BMO/Media.class.php:		$dir = $this->FreePBX->Config->get("AMPPLAYBACK");
BMO/Media.class.php:			$ampowner = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
BMO/Media.class.php:			$ampgroup =  $ampowner != $this->FreePBX->Config->get('AMPASTERISKUSER') ? $this->FreePBX->Config->get('AMPASTERISKGROUP') : $ampowner;
BMO/Media.class.php:			$brand = $this->FreePBX->Config->get("DASHBOARD_FREEPBX_BRAND");
BMO/Modules.class.php:		$path = $this->FreePBX->Config->get("AMPWEBROOT");
BMO/Modules.class.php:			$path = $this->FreePBX->Config->get("AMPWEBROOT");
BMO/Modules.class.php:		$path = $this->FreePBX->Config->get("AMPWEBROOT");
BMO/Modules.class.php:				$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
BMO/Logger.class.php:		$this->systemID = $this->freepbx->Config->get('FREEPBX_SYSTEM_IDENT');
BMO/Logger.class.php:		$this->defaultLogDir = $this->freepbx->Config->get('ASTLOGDIR');
BMO/Logger.class.php:			$path = $this->freepbx->Config->get('FPBX_LOG_FILE');
BMO/Logger.class.php:		if($this->freepbx->Config->get('AMPDISABLELOG')) {
BMO/Logger.class.php:			$AMPSYSLOGLEVEL = $this->freepbx->Config->get('AMPSYSLOGLEVEL');
BMO/Notifications.class.php:		if (!$this->freepbx->Config->exists($setting)) {
BMO/Notifications.class.php:			$this->freepbx->Config->define_conf_setting($setting,$set,true);
BMO/Notifications.class.php:			$this->freepbx->Config->update($setting, true);
BMO/Notifications.class.php:		$this->freepbx->Config->remove_conf_setting($setting);
BMO/PKCS.class.php:				include_once $freepbx->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/certman/Certman.class.php";
BMO/PKCS.class.php:				include_once $freepbx->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/filestore/Filestore.class.php";
Builtin/UpdateManager.php:		$this->brand = $this->freepbx->Config->get('DASHBOARD_FREEPBX_BRAND');
Builtin/UpdateManager.php:		if($this->freepbx->Config->conf_setting_exists('AUTOSECURITYUPDATES')) {
Builtin/UpdateManager.php:			$setting = $this->freepbx->Config->get('AUTOSECURITYUPDATES');
Builtin/UpdateManager.php:			$this->freepbx->Config->remove_conf_setting('AUTOSECURITYUPDATES');
Builtin/UpdateManager.php:		if($this->freepbx->Config->conf_setting_exists('SEND_UNSIGNED_EMAILS_NOTIFICATIONS')) {
Builtin/UpdateManager.php:			$setting = $this->freepbx->Config->get('SEND_UNSIGNED_EMAILS_NOTIFICATIONS');
Builtin/UpdateManager.php:			$this->freepbx->Config->remove_conf_setting('SEND_UNSIGNED_EMAILS_NOTIFICATIONS');
Builtin/UpdateManager.php:		if($this->freepbx->Config->conf_setting_exists('CRONMAN_UPDATES_CHECK')) {
Builtin/UpdateManager.php:			$setting = $this->freepbx->Config->get('CRONMAN_UPDATES_CHECK');
Builtin/UpdateManager.php:			$this->freepbx->Config->remove_conf_setting('CRONMAN_UPDATES_CHECK');
Builtin/UpdateManager.php:			$retarr['system_ident'] = htmlspecialchars($this->freepbx->Config->get('FREEPBX_SYSTEM_IDENT'), ENT_QUOTES|ENT_SUBSTITUTE, 'UTF-8', false);
Builtin/UpdateManager.php:		$fwconsole = $this->freepbx->Config->get('AMPSBIN')."/fwconsole" ;
Builtin/UpdateManager.php:			if($this->freepbx->Config->get('AUTOMODULEUPDATESANDRELOAD')){
Builtin/Restore.php:					$this->log(sprintf(_("Current FreePBX Web Root Directory is %s"), $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')));
Builtin/Restore.php:					$this->log(sprintf(_("Current Asterisk Modules Directory is %s"), $this->FreePBX->Config->get_conf_setting('ASTMODDIR',true)));
Composer/vendor/doctrine/cache/.travis.yml:    - if [[ $TRAVIS_PHP_VERSION = 7.* ]] ; then pecl config-set preferred_state beta; echo yes | pecl install apcu; fi;
Composer/vendor/doctrine/cache/.travis.yml:    - if [[ $TRAVIS_PHP_VERSION != 'hhvm' ]]; then phpenv config-add ./tests/travis/php.ini; fi;
Composer/vendor/doctrine/dbal/UPGRADE.md:    $config->setFilterSchemaAssetsExpression('foo');
Composer/vendor/doctrine/dbal/UPGRADE.md:    $config->setFilterSchemaAssetsExpression('(foo)');
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $this->autoCommit = $config->getAutoCommit();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $resultCache = $qcp->getResultCacheDriver() ?: $this->_config->getResultCacheImpl();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php:        $schemaConfig->setMaxIdentifierLength($this->_platform->getMaxIdentifierLength());
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php:            $schemaConfig->setName($searchPaths[0]);
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php:            $schemaConfig->setDefaultTableOptions($params['defaultTableOptions']);
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Schema.php:        $this->_setName($schemaConfig->getName() ?: 'public');
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Schema.php:        return $this->_schemaConfig->hasExplicitForeignKeyIndexes();
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Schema.php:        foreach ($this->_schemaConfig->getDefaultTableOptions() as $name => $value) {
Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Table.php:            return $this->_schemaConfig->getMaxIdentifierLength();
Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setMetadataDriverImpl($driver);
Composer/vendor/doctrine/orm/UPGRADE.md:This is already done inside the ``$config->newDefaultAnnotationDriver``, so everything should automatically work if you are using this method. You can verify if everything still works by executing a console command such as schema-validate that loads all metadata into memory.
Composer/vendor/doctrine/orm/UPGRADE.md:    $cliConfig->setAttribute('em', $entityManager);
Composer/vendor/doctrine/orm/UPGRADE.md:    $driverImpl = $config->newDefaultAnnotationDriver(array(__DIR__."/Entities"));
Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setMetadataDriverImpl($driverImpl);
Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setProxyDir('/path/to/myproject/lib/MyProject/Generated/Proxies');
Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setProxyNamespace('MyProject\Generated\Proxies');
Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $config->setSecondLevelCacheEnabled();
Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $cacheConfig  =  $config->getSecondLevelCacheConfiguration();
Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $regionConfig =  $cacheConfig->getRegionsConfiguration();
Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $regionConfig->setLifetime('country_region', 3600); 
Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $config->addCustomNumericFunction(
Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $config->setDefaultQueryHints(
Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomStringFunction($name, $class);
Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomNumericFunction($name, $class);
Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomDatetimeFunction($name, $class);
Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomStringFunction($name, function () {
Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomStringFunction('DATEDIFF', 'DoctrineExtensions\Query\MySql\DateDiff');
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setMetadataCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $driverImpl = $config->newDefaultAnnotationDriver(array(APPPATH.'models/Entities'));
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setMetadataDriverImpl($driverImpl);
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setQueryCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setQueryCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setProxyDir(APPPATH.'/models/proxies');
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setProxyNamespace('Proxies');
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setSQLLogger($logger);
Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setAutoGenerateProxyClasses( TRUE );
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $driverImpl = $config->newDefaultAnnotationDriver('/path/to/lib/MyProject/Entities');
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataDriverImpl($driverImpl);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setQueryCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyDir('/path/to/myproject/lib/MyProject/Proxies');
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyNamespace('MyProject\Proxies');
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:        $config->setAutoGenerateProxyClasses(true);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:        $config->setAutoGenerateProxyClasses(false);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyDir($dir);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getProxyDir();
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyNamespace($namespace);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getProxyNamespace();
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataDriverImpl($driver);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getMetadataDriverImpl();
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $driverImpl = $config->newDefaultAnnotationDriver('/path/to/lib/MyProject/Entities');
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataDriverImpl($driverImpl);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getMetadataCacheImpl();
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setQueryCacheImpl($cache);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getQueryCacheImpl();
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setSQLLogger($logger);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getSQLLogger();
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setAutoGenerateProxyClasses($mode);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setDefaultRepositoryClassName($fqcn);
Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getDefaultRepositoryClassName();
Composer/vendor/doctrine/orm/docs/en/reference/caching.rst:    $config->setQueryCacheImpl(new \Doctrine\Common\Cache\ApcCache());
Composer/vendor/doctrine/orm/docs/en/reference/caching.rst:    $config->setResultCacheImpl(new \Doctrine\Common\Cache\ApcCache());
Composer/vendor/doctrine/orm/docs/en/reference/caching.rst:    $config->setMetadataCacheImpl(new \Doctrine\Common\Cache\ApcCache());
Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->addCustomStringFunction($name, $class);
Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->addCustomNumericFunction($name, $class);
Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->addCustomDatetimeFunction($name, $class);
Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->registerNumericFunction('FLOOR', 'MyProject\Query\MysqlFloor');
Composer/vendor/doctrine/orm/docs/en/reference/filters.rst:    $config->addFilter("locale", "\Doctrine\Tests\ORM\Functional\MyLocaleFilter");
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->setSecondLevelCacheEnabled();
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->getSecondLevelCacheConfiguration()
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $cacheConfig  =  $config->getSecondLevelCacheConfiguration();
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $regionConfig =  $cacheConfig->getRegionsConfiguration();
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $regionConfig->setLifetime('my_entity_region', 3600);   // Time to live for a specific region; In seconds
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $regionConfig->setDefaultLifetime(7200);                // Default time to live; In seconds
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->setSecondLevelCacheEnabled(true);
Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->getSecondLevelCacheConfiguration()
Composer/vendor/doctrine/orm/docs/en/reference/xml-mapping.rst:    $config->setMetadataDriverImpl($driver);
Composer/vendor/doctrine/orm/docs/en/reference/yaml-mapping.rst:    $config->setMetadataDriverImpl($driver);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:        $lifetime = $this->regionsConfig->getLifetime($cache['region']);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:            $region    = new FileLockRegion($region, $directory, $this->regionsConfig->getLockLifetime($cache['region']));
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:            $lifetime = $this->regionsConfig->getLifetime($name);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultQueryCache.php:        $this->cacheLogger  = $cacheConfig->getCacheLogger();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultQueryCache.php:        $this->validator    = $cacheConfig->getQueryValidator();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Collection/AbstractCollectionPersister.php:        $cacheFactory   = $cacheConfig->getCacheFactory();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Collection/AbstractCollectionPersister.php:        $this->cacheLogger      = $cacheConfig->getCacheLogger();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Entity/AbstractEntityPersister.php:        $cacheFactory   = $cacheConfig->getCacheFactory();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Entity/AbstractEntityPersister.php:        $this->cacheLogger      = $cacheConfig->getCacheLogger();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        $metadataFactoryClassName = $config->getClassMetadataFactoryName();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        $this->metadataFactory->setCacheDriver($this->config->getMetadataCacheImpl());
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        $this->repositoryFactory = $config->getRepositoryFactory();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $config->getProxyDir(),
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $config->getProxyNamespace(),
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $config->getAutoGenerateProxyClasses()
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        if ($config->isSecondLevelCacheEnabled()) {
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $cacheConfig    = $config->getSecondLevelCacheConfiguration();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $cacheFactory   = $cacheConfig->getCacheFactory();
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        return $this->createQuery($this->config->getNamedQuery($name));
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        list($sql, $rsm) = $this->config->getNamedNativeQuery($name);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:                if (($class = $this->config->getCustomHydrationMode($hydrationMode)) !== null) {
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        if ( ! $config->getMetadataDriverImpl()) {
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/FilterCollection.php:            $filterClass = $this->config->getFilterClassName($name);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/FilterCollection.php:        return null !== $this->config->getFilterClassName($name);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php:            case ($config->getCustomStringFunction($funcName) !== null):
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php:            case ($config->getCustomNumericFunction($funcName) !== null):
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php:            case ($config->getCustomDatetimeFunction($funcName) !== null):
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/ConvertMappingCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/CreateCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/DropCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/UpdateCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/SchemaTool.php:        $metadataSchemaConfig->setExplicitForeignKeyIndexes(false);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataDriverImpl($config->newDefaultAnnotationDriver($paths, $useSimpleAnnotationReader));
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataDriverImpl(new XmlDriver($paths));
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataDriverImpl(new YamlDriver($paths));
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataCacheImpl($cache);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setQueryCacheImpl($cache);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setResultCacheImpl($cache);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setProxyDir($proxyDir);
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setProxyNamespace('DoctrineProxies');
Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setAutoGenerateProxyClasses($isDevMode);
Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('base_url'),
Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('username'),
Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('api_key')
Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('base_url'),
Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('username'),
Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('api_key')
Composer/vendor/swiftmailer/swiftmailer/lib/mime_types.php:    'c11amz' => 'application/vnd.cluetrust.cartomobile-config-pkg',
Composer/vendor/symfony/dependency-injection/Compiler/Compiler.php:        $this->passConfig->addPass($pass, $type, $priority);
Composer/vendor/symfony/dependency-injection/Compiler/Compiler.php:            foreach ($this->passConfig->getPasses() as $pass) {
Composer/vendor/symfony/dependency-injection/Tests/Compiler/CheckCircularReferencesPassTest.php:        $passConfig->setOptimizationPasses([
Composer/vendor/symfony/dependency-injection/Tests/Compiler/CheckCircularReferencesPassTest.php:        $passConfig->setRemovingPasses([]);
Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $config->setBeforeOptimizationPasses([]);
Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $config->addPass($pass1, PassConfig::TYPE_BEFORE_OPTIMIZATION, 10);
Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $config->addPass($pass2, PassConfig::TYPE_BEFORE_OPTIMIZATION, 30);
Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $passes = $config->getBeforeOptimizationPasses();
Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->setDefinition('baz', new Definition('BazClass'));
Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->setAlias('alias_for_foo', 'foo');
Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->setDefinition('foo', new Definition('BazClass'));
Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $this->assertSame(['%env(Bar)%'], $config->resolveEnvPlaceholders([$bag->get('env(Bar)')]));
Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $childDefB = $config->registerForAutoconfiguration('BInterface');
Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->registerForAutoconfiguration('AInterface');
Composer/vendor/symfony/http-foundation/File/MimeType/MimeTypeExtensionGuesser.php:        'application/vnd.cluetrust.cartomobile-config-pkg' => 'c11amz',
Console/Job.class.php:		$this->fwjobsLogEnabled  = $this->freePBX->Config->get('FWJOBS_LOGS');
Console/Job.class.php:			$astLogdir = $this->freePBX->Config->get('ASTLOGDIR');
Console/Moduleadmin.class.php:		$brand = $this->FreePBX->Config->get('DASHBOARD_FREEPBX_BRAND');
Console/Moduleadmin.class.php:		$ident = $this->FreePBX->Config->get('FREEPBX_SYSTEM_IDENT');
Console/Moduleadmin.class.php:			$AMPASTERISKWEBUSER = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
Console/Moduleadmin.class.php:					$this->FreePBX->Config->update('MODULEADMINEDGE',1);
Console/Moduleadmin.class.php:				$this->previousEdge = $this->FreePBX->Config->get('MODULEADMINEDGE');
Console/Moduleadmin.class.php:					$this->FreePBX->Config->update('MODULEADMINEDGE',0);
Console/Moduleadmin.class.php:			$this->FreePBX->Config->update('MODULEADMINEDGE',$this->previousEdge);
Console/Moduleadmin.class.php:				$fwconsole = $this->FreePBX->Config->get('AMPSBIN')."/fwconsole";
Console/Moduleadmin.class.php:		$ampsbin = $this->FreePBX->Config->get('AMPSBIN');
Console/Moduleadmin.class.php:		$showSignCol = ($this->FreePBX->Config->get('SIGNATURECHECK')) ? _('Signature') : null;
Console/Moduleadmin.class.php:				} elseif (file_exists($this->FreePBX->Config->get('AMPWEBROOT') . "/admin/modules/" . $name . "/module.sig")) {
Console/Moduleadmin.class.php:					$sigfile = $this->FreePBX->Config->get('AMPWEBROOT') . "/admin/modules/" . $name . "/module.sig";
Console/Moduleadmin.class.php:		$devmode = $this->FreePBX->Config->get('DEVEL');
Console/Reload.class.php:		$this->symlink_dirs['bin'] = $this->freepbx->Config->get('AMPBIN');
Console/Reload.class.php:		$this->symlink_dirs['etc'] = $this->freepbx->Config->get('ASTETCDIR');
Console/Reload.class.php:		$this->symlink_dirs['images'] = $this->freepbx->Config->get('AMPWEBROOT') . "/admin/images";
Console/Reload.class.php:		$this->symlink_sound_dirs['sounds'] = $this->freepbx->Config->get('ASTVARLIBDIR') . '/sounds';
Console/Reload.class.php:		$this->cp_dirs['agi-bin'] 	= $this->freepbx->Config->get('ASTAGIDIR');
Console/Reload.class.php:		//$this->cp_dirs['bin'] = $this->freepbx->Config->get('AMPBIN');
Console/Reload.class.php:		$AMPWEBROOT = $this->freepbx->Config->get('AMPWEBROOT');
Console/Reload.class.php:		if (!$this->freepbx->Config->get('DISABLE_CSS_AUTOGEN')) {
Console/Reload.class.php:		if ($this->freepbx->Config->get('DISABLECUSTOMCONTEXTS')) {
Console/Reload.class.php:		if (!$this->freepbx->Config->get('NOTICE_BROWSER_STATS') && $this->freepbx->Config->get('BROWSER_STATS')) {
Console/Reload.class.php:			$this->freepbx->Config->update('NOTICE_BROWSER_STATS',true, true, true);
Console/Reload.class.php:		if (!$this->freepbx->Config->exists('AST_APP_VQA')) {
Console/Reload.class.php:			$this->freepbx->Config->define_conf_setting('AST_APP_VQA',$set);
Console/Reload.class.php:		$this->freepbx->Config->update('AST_APP_VQA', $this->freepbx->astman->app_exists('VQA'), true, true);
Console/Reload.class.php:		$my_probs = $this->skip_registry_checks ? false : $this->freepbx->Destinations->listProblemDestinations(!$this->freepbx->Config->get('CUSTOMASERROR'));
Console/Reload.class.php:		if ((!$extens_ok && $this->freepbx->Config->get('XTNCONFLICTABORT')) || (!$dests_ok && $this->freepbx->Config->get('BADDESTABORT'))) {
Console/Reload.class.php:		$this->freepbx->WriteConfig->writeConfig($ext->get_filename(), $ext->generateConf());
Console/Reload.class.php:		if ($this->freepbx->Config->amportal_canwrite()) {
Console/Reload.class.php:			file_put_contents('/etc/amportal.conf',$this->freepbx->Config->amportal_generate(true));
Console/Reload.class.php:		if ($this->freepbx->Config->get('AMPMGRPASS') == $this->freepbx->Config->get_conf_default_setting('AMPMGRPASS')) {
Console/Reload.class.php:		if ($this->freepbx->Config->get('AMPEXTENSIONS') == 'deviceanduser' && !$this->freepbx->Config->get('DYNAMICHINTS')) {
Console/Reload.class.php:		$post_custom = $this->freepbx->Config->get('AMPLOCALBIN').'/retrieve_conf_post_custom';
Console/Reload.class.php:		if ($this->freepbx->Config->get('AMPLOCALBIN') && file_exists($post_custom)) {
Console/Reload.class.php:		exec("grep '#include' ".$this->freepbx->Config->get('ASTETCDIR')."/*.conf | sed 's/;.*//; s/#include//'",$output,$retcode);
Console/Reload.class.php:			$target = ($rawfile[0] == '/') ? $rawfile : $this->freepbx->Config->get('ASTETCDIR')."/$rawfile";
Console/Reload.class.php:		if(!$this->freepbx->Config->get('SIGNATURECHECK')) {
Console/Reload.class.php:			if(file_exists($this->freepbx->Config->get('AMPBIN')."/fwconsole")) {
Console/Reload.class.php:				if(!is_executable($this->freepbx->Config->get('AMPBIN')."/fwconsole")) {
Console/Reload.class.php:					if(!@chmod($this->freepbx->Config->get('AMPBIN')."/fwconsole", 0755)) {
Console/Reload.class.php:				exec($this->freepbx->Config->get('AMPBIN')."/fwconsole util signaturecheck > /dev/null 2>&1 &");
Console/Reload.class.php:			$brand = $this->freepbx->Config->get('DASHBOARD_FREEPBX_BRAND');
Console/Reload.class.php:		if($this->freepbx->Config->get('ASTCONFAPP') == 'app_meetme') {
Console/Reload.class.php:		$srcdir = $this->freepbx->Config->get('AMPWEBROOT') . '/admin/modules/' . $module . '/assets';
Console/Reload.class.php:		$targetdir = $this->freepbx->Config->get('AMPWEBROOT') . "/admin/assets/" . $module;
Console/Reload.class.php:				if(preg_match('/^'.str_replace("/","\/",$this->freepbx->Config->get('ASTETCDIR')).'/',$dest) && is_writable($dest)) {
Console/Reload.class.php:					if(!file_exists($this->freepbx->Config->get('ASTETCDIR').'/backup')) {
Console/Reload.class.php:						mkdir($this->freepbx->Config->get('ASTETCDIR').'/backup');
Console/Reload.class.php:					$f = $this->freepbx->Config->get('ASTETCDIR').'/backup/'.basename($dest).".bk.".time();
Console/Reload.class.php:				} else if(preg_match('/^'.str_replace("/","\/",$this->freepbx->Config->get('AMPBIN')).'/',$dest) && is_writable($dest)) {
Console/Reload.class.php:					if(!file_exists($this->freepbx->Config->get('AMPBIN').'/backup')) {
Console/Reload.class.php:						mkdir($this->freepbx->Config->get('AMPBIN').'/backup');
Console/Reload.class.php:					$f = $this->freepbx->Config->get('AMPBIN').'/backup/'.basename($dest).".bk.".time();
Console/Reload.class.php:				} else if(preg_match('/^'.str_replace("/","\/",$this->freepbx->Config->get('ASTAGIDIR')).'/',$dest) && is_writable($dest)) {
Console/Reload.class.php:					if(!file_exists($this->freepbx->Config->get('ASTAGIDIR').'/backup')) {
Console/Reload.class.php:						mkdir($this->freepbx->Config->get('ASTAGIDIR').'/backup');
Console/Reload.class.php:					$f = $this->freepbx->Config->get('ASTAGIDIR').'/backup/'.basename($dest).".bk.".time();
Console/Reload.class.php:			$this->freepbx->Notifications->add_notice('retrieve_conf', 'SYMLINKNOTICE', _("Symlink Conflict Resolved"),sprintf(_("retrieve_conf resolved a symlink with %s<br \>This is a notice to let you know that the original file was moved to %s, there is nothing more you need to do"),$this->symlink_notice_modules,$this->freepbx->Config->get('ASTETCDIR').'/backup'));
Console/Reload.class.php:			$this->freepbx->Notifications->add_notice('retrieve_conf', 'SYMLINKNOTICEBIN', _("Symlink Conflict Resolved"),sprintf(_("retrieve_conf resolved a symlink with %s<br \>This is a notice to let you know that the original file was moved to %s, there is nothing more you need to do"),$this->symlink_notice_modules,$this->freepbx->Config->get('AMPBIN').'/backup'));
Console/Reload.class.php:			$this->freepbx->Notifications->add_notice('retrieve_conf', 'SYMLINKNOTICEAGI', _("Symlink Conflict Resolved"),sprintf(_("retrieve_conf resolved a symlink with %s<br \>This is a notice to let you know that the original file was moved to %s, there is nothing more you need to do"),$this->symlink_notice_modules,$this->freepbx->Config->get('ASTAGIDIR').'/backup'));
Console/Reload.class.php:						$ampowner = $this->freepbx->Config->get('AMPASTERISKWEBUSER');
Console/Reload.class.php:						$ampgroup =  $this->freepbx->Config->get('AMPASTERISKWEBUSER') != $this->freepbx->Config->get('AMPASTERISKUSER') ? $this->freepbx->Config->get('AMPASTERISKGROUP') : $this->freepbx->Config->get('AMPASTERISKWEBGROUP');
Console/Reload.class.php:			"command" => $this->freepbx->Config->get('AMPSBIN')."/fwconsole util cleanplaybackcache -q",
Console/Reload.class.php:		$setting_post_reload = $this->freepbx->Config->get('POST_RELOAD');
Console/Reload.class.php:		$setting_pre_reload = $this->freepbx->Config->get('PRE_RELOAD');
moduleAdminFunctions.php:	$brand = $FreePBX->Config->get("DASHBOARD_FREEPBX_BRAND");
moduleAdminFunctions.php:    $command = $FreePBX->Config->get('AMPBIN')."/module_admin listonline > /dev/null 2>&1";
moduleAdminFunctions.php:    if(!$FreePBX->Config->get('CRONMAN_UPDATES_CHECK')){
moduleAdminFunctions.php:        $FreePBX->Config->set('CRONMAN_UPDATES_CHECK', true);
moduleAdminFunctions.php:    $command = $FreePBX->Config->get('AMPBIN')."/module_admin listonline > /dev/null 2>&1";
moduleAdminFunctions.php:    if($FreePBX->Config->get('CRONMAN_UPDATES_CHECK')){
moduleAdminFunctions.php:        $FreePBX->Config->set('CRONMAN_UPDATES_CHECK', false);
moduleAdminFunctions.php:    return !empty($FreePBX->Config->get('CRONMAN_UPDATES_CHECK'));
modulefunctions.class.php:		$FreePBX->Config->update("SIGNATURECHECK", true);
set:BMO/Ajax.class.php:			$file = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/libraries/BMO/Framework.class.php";
set:BMO/Ajax.class.php:			$file = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/libraries/BMO/Search.class.php";
set:BMO/Ajax.class.php:			$file = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/$module/$ucMod.class.php";
set:BMO/Ajax.class.php:		if($this->settings['allowremote'] !== true && $this->freepbx->Config->get('CHECKREFERER')) {
set:BMO/ConfigFile.class.php:			$myconfig = $this->config->ProcessedConfig;
set:BMO/ConfigFile.class.php:		if (!isset($this->config->ProcessedConfig[$section])) {
set:BMO/ConfigFile.class.php:		if (isset($this->config->ProcessedConfig[$section][$key]) && is_array($this->config->ProcessedConfig[$section][$key])) {
set:BMO/ConfigFile.class.php:			$this->config->ProcessedConfig[$section][$key] = array_filter(
set:BMO/ConfigFile.class.php:				$this->config->ProcessedConfig[$section][$key],
set:BMO/ConfigFile.class.php:			if (count($this->config->ProcessedConfig[$section][$key]) == 0) {
set:BMO/ConfigFile.class.php:				unset($this->config->ProcessedConfig[$section][$key]);
set:BMO/ConfigFile.class.php:		} elseif (isset($this->config->ProcessedConfig[$section][$key])) {
set:BMO/ConfigFile.class.php:			if ($val == null || $this->config->ProcessedConfig[$section][$key] == $val) {
set:BMO/ConfigFile.class.php:				unset($this->config->ProcessedConfig[$section][$key]);
set:BMO/ConfigFile.class.php:		if (count($this->config->ProcessedConfig[$section]) == 0) {
set:BMO/ConfigFile.class.php:			unset($this->config->ProcessedConfig[$section]);
set:BMO/ConfigFile.class.php:		if (!isset($this->config->ProcessedConfig[$section][$key])) {
set:BMO/ConfigFile.class.php:			$this->config->ProcessedConfig[$section][$key] = $val;
set:BMO/ConfigFile.class.php:		if (is_array($this->config->ProcessedConfig[$section][$key])) {
set:BMO/ConfigFile.class.php:			$this->config->ProcessedConfig[$section][$key][] = $val;
set:BMO/ConfigFile.class.php:		$tmpvar = $this->config->ProcessedConfig[$section][$key];
set:BMO/ConfigFile.class.php:		unset($this->config->ProcessedConfig[$section][$key]);
set:BMO/ConfigFile.class.php:		$this->config->ProcessedConfig[$section][$key][] = $tmpvar;
set:BMO/ConfigFile.class.php:		$this->config->ProcessedConfig[$section][$key][] = $val;
set:BMO/ConfigFile.class.php:		$this->FreePBX->WriteConfig(array($this->file => $this->config->ProcessedConfig));
set:BMO/Database/Migration.class.php:			$schemaConfig->setDefaultTableOptions(array(
set:BMO/FileHooks.class.php:							$this->FreePBX->WriteConfig->writeConfig($modconf,$module->generateConf($modconf),$generateHeader);
set:BMO/FileHooks.class.php:							$this->FreePBX->WriteConfig->writeConfig($module->get_filename(), $module->generateConf(),$generateHeader);
set:BMO/Unlock.class.php:		if (!$this->Config->get_conf_setting('REMOTEUNLOCK')) {
set:BMO/Unlock.class.php:		if (!$this->Config->get_conf_setting('REMOTEUNLOCK')) {
set:BMO/Job.class.php:		$ampbin = $this->freepbx->Config->get('AMPSBIN');
set:BMO/Job.class.php:		$sleeptime = $this->freepbx->Config->get_conf_setting('JOBSRANDOMSLEEP');
set:BMO/Less.class.php:		$less_path = $this->FreePBX->Config->get('AMPWEBROOT') .'/admin/assets/less';
set:BMO/Less.class.php:		$less_path = $this->FreePBX->Config->get('AMPWEBROOT') . '/admin/modules/' . $module . '/assets/less';
set:BMO/Less.class.php:			$ampowner = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
set:BMO/Less.class.php:			$ampgroup =  $ampowner != $this->FreePBX->Config->get('AMPASTERISKUSER') ? $this->FreePBX->Config->get('AMPASTERISKGROUP') : $ampowner;
set:BMO/Less.class.php:			$ampowner = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
set:BMO/Less.class.php:			$ampgroup =  $ampowner != $this->FreePBX->Config->get('AMPASTERISKUSER') ? $this->FreePBX->Config->get('AMPASTERISKGROUP') : $ampowner;
set:BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
set:BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
set:BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
set:BMO/LoadConfig.class.php:		$hint = !empty($hint) ? $hint : $this->freepbx->Config->get('ASTETCDIR');
set:BMO/ModulesConf.class.php:		$this->ProcessedConfig =& $this->conf->config->ProcessedConfig;
set:BMO/ModulesConf.class.php:		$current = $this->conf->config->ProcessedConfig['modules'];
set:BMO/ModulesConf.class.php:		$current = $this->conf->config->ProcessedConfig['modules'];
set:BMO/ModulesConf.class.php:		$current = $this->conf->config->ProcessedConfig['modules'];
set:BMO/View.class.php:		$package = $this->freepbx->Config->get('USE_PACKAGED_JS');
set:BMO/View.class.php:			$jspath = $this->freepbx->Config->get('AMPWEBROOT') .'/admin/assets/js';
set:BMO/View.class.php:		$freepbxtimezone = $this->freepbx->Config->get('PHPTIMEZONE');
set:BMO/View.class.php:			//$format = (php_sapi_name() !== 'cli' && !empty($_SESSION['AMP_user']->dateformat)) ? $_SESSION['AMP_user']->dateformat : $this->freepbx->Config->get("MDATEFORMAT");
set:BMO/View.class.php:			$format = !empty($this->dateformat) ? $this->dateformat : $this->freepbx->Config->get("MDATEFORMAT");
set:BMO/View.class.php:			//$format = (php_sapi_name() !== 'cli' && !empty($_SESSION['AMP_user']->timeformat)) ? $_SESSION['AMP_user']->timeformat : $this->freepbx->Config->get("MTIMEFORMAT");
set:BMO/View.class.php:			$format = !empty($this->timeformat) ? $this->timeformat : $this->freepbx->Config->get("MTIMEFORMAT");
set:BMO/View.class.php:			//$format = (php_sapi_name() !== 'cli' && !empty($_SESSION['AMP_user']->datetimeformat)) ? $_SESSION['AMP_user']->datetimeformat : $this->freepbx->Config->get("MDATETIMEFORMAT");
set:BMO/View.class.php:			$format = !empty($this->datetimeformat) ? $this->datetimeformat : $this->freepbx->Config->get("MDATETIMEFORMAT");
set:BMO/View.class.php:		$UIDEFAULTLANG = $this->freepbx->Config->get("UIDEFAULTLANG");
set:BMO/View.class.php:		bindtextdomain('amp',$this->freepbx->Config->get("AMPWEBROOT").'/admin/i18n');
set:BMO/View.class.php:		foreach(glob($this->freepbx->Config->get("AMPWEBROOT")."/admin/i18n/*",GLOB_ONLYDIR) as $langDir) {
set:BMO/Extensions.class.php:		if (!$this->FreePBX->Config->get('AGGRESSIVE_DUPLICATE_CHECK') && !$force) {
set:BMO/Mail.class.php:		//$brand = $this->freepbx->Config->get('DASHBOARD_FREEPBX_BRAND');
set:BMO/Mail.class.php:		$ident = $this->freepbx->Config->get('FREEPBX_SYSTEM_IDENT');
set:BMO/Realtime.class.php:			if (isset($current->config->ProcessedConfig['settings']['queue_log'])) {
set:BMO/Realtime.class.php:				unset($current->config->ProcessedConfig['settings']['queue_log']);
set:BMO/Realtime.class.php:			if (!isset($current->config->ProcessedConfig['settings'])) {
set:BMO/Realtime.class.php:			if (!isset($current->config->ProcessedConfig['settings']['queue_log'])) {
set:BMO/WriteConfig.class.php:		$dir = $this->freepbx->Config->get('ASTETCDIR');
set:BMO/WriteConfig.class.php:		$AMPASTERISKWEBUSER = $this->freepbx->Config->get("AMPASTERISKWEBUSER");
set:BMO/WriteConfig.class.php:		$AMPASTERISKWEBGROUP = $this->freepbx->Config->get("AMPASTERISKWEBGROUP");
set:BMO/WriteConfig.class.php:		$AMPASTERISKUSER = $this->freepbx->Config->get("AMPASTERISKUSER");
set:BMO/WriteConfig.class.php:		$AMPASTERISKGROUP = $this->freepbx->Config->get("AMPASTERISKGROUP");
set:BMO/Cache.class.php:					$cachePath = $this->freepbx->Config->get('ASTSPOOLDIR')."/cache";
set:BMO/Cache.class.php:						$user = $this->freepbx->Config->get('AMPASTERISKWEBUSER');
set:BMO/Cache.class.php:						$group = $this->freepbx->Config->get('AMPASTERISKWEBGROUP');
set:BMO/Database.class.php:		$dbuser = $this->FreePBX->Config->get('AMPDBUSER') ? $this->FreePBX->Config->get('AMPDBUSER'):$amp_conf['AMPDBUSER'];
set:BMO/Database.class.php:		$dbpass = $this->FreePBX->Config->get('AMPDBPASS') ? $this->FreePBX->Config->get('AMPDBPASS'):$amp_conf['AMPDBPASS'];
set:BMO/Database.class.php:		$dbname = $this->FreePBX->Config->get('AMPDBNAME') ? $this->FreePBX->Config->get('AMPDBNAME') : 'asterisk';
set:BMO/Framework.class.php:		$AMPSBIN = $this->freepbx->Config->get('AMPSBIN');
set:BMO/Framework.class.php:			$this->freepbx->Config->update('AMPSBIN',dirname($out));
set:BMO/Framework.class.php:		$ASTETCDIR = $this->freepbx->Config->get('ASTETCDIR');
set:BMO/Framework.class.php:			$AMPMGRUSER = $this->freepbx->Config->get('AMPMGRUSER');
set:BMO/Framework.class.php:			$AMPMGRPASS = $this->freepbx->Config->get('AMPMGRPASS');
set:BMO/Framework.class.php:			$ASTMGRWRITETIMEOUT = $this->freepbx->Config->get('ASTMGRWRITETIMEOUT');
set:BMO/Framework.class.php:		if (!$this->freepbx->astman || !$res = $this->freepbx->astman->connect($this->freepbx->Config->get('ASTMANAGERHOST') . ":" . $this->freepbx->Config->get('ASTMANAGERPORT'), $this->freepbx->Config->get('AMPMGRUSER') , $this->freepbx->Config->get('AMPMGRPASS'), $bootstrap_settings['astman_events'])) {
set:BMO/Hooks.class.php:		$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
set:BMO/Hooks.class.php:			$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
set:BMO/Hooks.class.php:		$spooldir = $this->FreePBX->Config->get('ASTSPOOLDIR');
set:BMO/Hooks.class.php:		$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
set:BMO/Self_Helper.class.php:			$path = $this->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
set:BMO/Media.class.php:		$dir = $this->FreePBX->Config->get("AMPPLAYBACK");
set:BMO/Media.class.php:			$ampowner = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
set:BMO/Media.class.php:			$ampgroup =  $ampowner != $this->FreePBX->Config->get('AMPASTERISKUSER') ? $this->FreePBX->Config->get('AMPASTERISKGROUP') : $ampowner;
set:BMO/Media.class.php:			$brand = $this->FreePBX->Config->get("DASHBOARD_FREEPBX_BRAND");
set:BMO/Modules.class.php:		$path = $this->FreePBX->Config->get("AMPWEBROOT");
set:BMO/Modules.class.php:			$path = $this->FreePBX->Config->get("AMPWEBROOT");
set:BMO/Modules.class.php:		$path = $this->FreePBX->Config->get("AMPWEBROOT");
set:BMO/Modules.class.php:				$path = $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/";
set:BMO/Logger.class.php:		$this->systemID = $this->freepbx->Config->get('FREEPBX_SYSTEM_IDENT');
set:BMO/Logger.class.php:		$this->defaultLogDir = $this->freepbx->Config->get('ASTLOGDIR');
set:BMO/Logger.class.php:			$path = $this->freepbx->Config->get('FPBX_LOG_FILE');
set:BMO/Logger.class.php:		if($this->freepbx->Config->get('AMPDISABLELOG')) {
set:BMO/Logger.class.php:			$AMPSYSLOGLEVEL = $this->freepbx->Config->get('AMPSYSLOGLEVEL');
set:BMO/Notifications.class.php:		if (!$this->freepbx->Config->exists($setting)) {
set:BMO/Notifications.class.php:			$this->freepbx->Config->define_conf_setting($setting,$set,true);
set:BMO/Notifications.class.php:			$this->freepbx->Config->update($setting, true);
set:BMO/Notifications.class.php:		$this->freepbx->Config->remove_conf_setting($setting);
set:BMO/PKCS.class.php:				include_once $freepbx->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/certman/Certman.class.php";
set:BMO/PKCS.class.php:				include_once $freepbx->Config->get_conf_setting('AMPWEBROOT')."/admin/modules/filestore/Filestore.class.php";
set:Builtin/UpdateManager.php:		$this->brand = $this->freepbx->Config->get('DASHBOARD_FREEPBX_BRAND');
set:Builtin/UpdateManager.php:		if($this->freepbx->Config->conf_setting_exists('AUTOSECURITYUPDATES')) {
set:Builtin/UpdateManager.php:			$setting = $this->freepbx->Config->get('AUTOSECURITYUPDATES');
set:Builtin/UpdateManager.php:			$this->freepbx->Config->remove_conf_setting('AUTOSECURITYUPDATES');
set:Builtin/UpdateManager.php:		if($this->freepbx->Config->conf_setting_exists('SEND_UNSIGNED_EMAILS_NOTIFICATIONS')) {
set:Builtin/UpdateManager.php:			$setting = $this->freepbx->Config->get('SEND_UNSIGNED_EMAILS_NOTIFICATIONS');
set:Builtin/UpdateManager.php:			$this->freepbx->Config->remove_conf_setting('SEND_UNSIGNED_EMAILS_NOTIFICATIONS');
set:Builtin/UpdateManager.php:		if($this->freepbx->Config->conf_setting_exists('CRONMAN_UPDATES_CHECK')) {
set:Builtin/UpdateManager.php:			$setting = $this->freepbx->Config->get('CRONMAN_UPDATES_CHECK');
set:Builtin/UpdateManager.php:			$this->freepbx->Config->remove_conf_setting('CRONMAN_UPDATES_CHECK');
set:Builtin/UpdateManager.php:			$retarr['system_ident'] = htmlspecialchars($this->freepbx->Config->get('FREEPBX_SYSTEM_IDENT'), ENT_QUOTES|ENT_SUBSTITUTE, 'UTF-8', false);
set:Builtin/UpdateManager.php:		$fwconsole = $this->freepbx->Config->get('AMPSBIN')."/fwconsole" ;
set:Builtin/UpdateManager.php:			if($this->freepbx->Config->get('AUTOMODULEUPDATESANDRELOAD')){
set:Builtin/Restore.php:					$this->log(sprintf(_("Current FreePBX Web Root Directory is %s"), $this->FreePBX->Config->get_conf_setting('AMPWEBROOT')));
set:Builtin/Restore.php:					$this->log(sprintf(_("Current Asterisk Modules Directory is %s"), $this->FreePBX->Config->get_conf_setting('ASTMODDIR',true)));
set:Composer/vendor/doctrine/cache/.travis.yml:    - if [[ $TRAVIS_PHP_VERSION = 7.* ]] ; then pecl config-set preferred_state beta; echo yes | pecl install apcu; fi;
set:Composer/vendor/doctrine/cache/.travis.yml:    - if [[ $TRAVIS_PHP_VERSION != 'hhvm' ]]; then phpenv config-add ./tests/travis/php.ini; fi;
set:Composer/vendor/doctrine/dbal/UPGRADE.md:    $config->setFilterSchemaAssetsExpression('foo');
set:Composer/vendor/doctrine/dbal/UPGRADE.md:    $config->setFilterSchemaAssetsExpression('(foo)');
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $this->autoCommit = $config->getAutoCommit();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $resultCache = $qcp->getResultCacheDriver() ?: $this->_config->getResultCacheImpl();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:        $logger = $this->_config->getSQLLogger();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php:        $schemaConfig->setMaxIdentifierLength($this->_platform->getMaxIdentifierLength());
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php:            $schemaConfig->setName($searchPaths[0]);
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php:            $schemaConfig->setDefaultTableOptions($params['defaultTableOptions']);
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Schema.php:        $this->_setName($schemaConfig->getName() ?: 'public');
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Schema.php:        return $this->_schemaConfig->hasExplicitForeignKeyIndexes();
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Schema.php:        foreach ($this->_schemaConfig->getDefaultTableOptions() as $name => $value) {
set:Composer/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Table.php:            return $this->_schemaConfig->getMaxIdentifierLength();
set:Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setMetadataDriverImpl($driver);
set:Composer/vendor/doctrine/orm/UPGRADE.md:This is already done inside the ``$config->newDefaultAnnotationDriver``, so everything should automatically work if you are using this method. You can verify if everything still works by executing a console command such as schema-validate that loads all metadata into memory.
set:Composer/vendor/doctrine/orm/UPGRADE.md:    $cliConfig->setAttribute('em', $entityManager);
set:Composer/vendor/doctrine/orm/UPGRADE.md:    $driverImpl = $config->newDefaultAnnotationDriver(array(__DIR__."/Entities"));
set:Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setMetadataDriverImpl($driverImpl);
set:Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setProxyDir('/path/to/myproject/lib/MyProject/Generated/Proxies');
set:Composer/vendor/doctrine/orm/UPGRADE.md:    $config->setProxyNamespace('MyProject\Generated\Proxies');
set:Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $config->setSecondLevelCacheEnabled();
set:Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $cacheConfig  =  $config->getSecondLevelCacheConfiguration();
set:Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $regionConfig =  $cacheConfig->getRegionsConfiguration();
set:Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $regionConfig->setLifetime('country_region', 3600); 
set:Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $config->addCustomNumericFunction(
set:Composer/vendor/doctrine/orm/docs/en/changelog/migration_2_5.rst:    $config->setDefaultQueryHints(
set:Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomStringFunction($name, $class);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomNumericFunction($name, $class);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomDatetimeFunction($name, $class);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomStringFunction($name, function () {
set:Composer/vendor/doctrine/orm/docs/en/cookbook/dql-user-defined-functions.rst:    $config->addCustomStringFunction('DATEDIFF', 'DoctrineExtensions\Query\MySql\DateDiff');
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setMetadataCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $driverImpl = $config->newDefaultAnnotationDriver(array(APPPATH.'models/Entities'));
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setMetadataDriverImpl($driverImpl);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setQueryCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setQueryCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setProxyDir(APPPATH.'/models/proxies');
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setProxyNamespace('Proxies');
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setSQLLogger($logger);
set:Composer/vendor/doctrine/orm/docs/en/cookbook/integrating-with-codeigniter.rst:        $config->setAutoGenerateProxyClasses( TRUE );
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $driverImpl = $config->newDefaultAnnotationDriver('/path/to/lib/MyProject/Entities');
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataDriverImpl($driverImpl);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setQueryCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyDir('/path/to/myproject/lib/MyProject/Proxies');
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyNamespace('MyProject\Proxies');
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:        $config->setAutoGenerateProxyClasses(true);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:        $config->setAutoGenerateProxyClasses(false);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyDir($dir);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getProxyDir();
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setProxyNamespace($namespace);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getProxyNamespace();
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataDriverImpl($driver);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getMetadataDriverImpl();
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $driverImpl = $config->newDefaultAnnotationDriver('/path/to/lib/MyProject/Entities');
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataDriverImpl($driverImpl);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setMetadataCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getMetadataCacheImpl();
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setQueryCacheImpl($cache);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getQueryCacheImpl();
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setSQLLogger($logger);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getSQLLogger();
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setAutoGenerateProxyClasses($mode);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->setDefaultRepositoryClassName($fqcn);
set:Composer/vendor/doctrine/orm/docs/en/reference/advanced-configuration.rst:    $config->getDefaultRepositoryClassName();
set:Composer/vendor/doctrine/orm/docs/en/reference/caching.rst:    $config->setQueryCacheImpl(new \Doctrine\Common\Cache\ApcCache());
set:Composer/vendor/doctrine/orm/docs/en/reference/caching.rst:    $config->setResultCacheImpl(new \Doctrine\Common\Cache\ApcCache());
set:Composer/vendor/doctrine/orm/docs/en/reference/caching.rst:    $config->setMetadataCacheImpl(new \Doctrine\Common\Cache\ApcCache());
set:Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->addCustomStringFunction($name, $class);
set:Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->addCustomNumericFunction($name, $class);
set:Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->addCustomDatetimeFunction($name, $class);
set:Composer/vendor/doctrine/orm/docs/en/reference/dql-doctrine-query-language.rst:    $config->registerNumericFunction('FLOOR', 'MyProject\Query\MysqlFloor');
set:Composer/vendor/doctrine/orm/docs/en/reference/filters.rst:    $config->addFilter("locale", "\Doctrine\Tests\ORM\Functional\MyLocaleFilter");
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->setSecondLevelCacheEnabled();
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->getSecondLevelCacheConfiguration()
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $cacheConfig  =  $config->getSecondLevelCacheConfiguration();
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $regionConfig =  $cacheConfig->getRegionsConfiguration();
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $regionConfig->setLifetime('my_entity_region', 3600);   // Time to live for a specific region; In seconds
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $regionConfig->setDefaultLifetime(7200);                // Default time to live; In seconds
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->setSecondLevelCacheEnabled(true);
set:Composer/vendor/doctrine/orm/docs/en/reference/second-level-cache.rst:    $config->getSecondLevelCacheConfiguration()
set:Composer/vendor/doctrine/orm/docs/en/reference/xml-mapping.rst:    $config->setMetadataDriverImpl($driver);
set:Composer/vendor/doctrine/orm/docs/en/reference/yaml-mapping.rst:    $config->setMetadataDriverImpl($driver);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:        $lifetime = $this->regionsConfig->getLifetime($cache['region']);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:            $region    = new FileLockRegion($region, $directory, $this->regionsConfig->getLockLifetime($cache['region']));
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultCacheFactory.php:            $lifetime = $this->regionsConfig->getLifetime($name);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultQueryCache.php:        $this->cacheLogger  = $cacheConfig->getCacheLogger();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/DefaultQueryCache.php:        $this->validator    = $cacheConfig->getQueryValidator();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Collection/AbstractCollectionPersister.php:        $cacheFactory   = $cacheConfig->getCacheFactory();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Collection/AbstractCollectionPersister.php:        $this->cacheLogger      = $cacheConfig->getCacheLogger();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Entity/AbstractEntityPersister.php:        $cacheFactory   = $cacheConfig->getCacheFactory();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Cache/Persister/Entity/AbstractEntityPersister.php:        $this->cacheLogger      = $cacheConfig->getCacheLogger();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        $metadataFactoryClassName = $config->getClassMetadataFactoryName();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        $this->metadataFactory->setCacheDriver($this->config->getMetadataCacheImpl());
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        $this->repositoryFactory = $config->getRepositoryFactory();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $config->getProxyDir(),
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $config->getProxyNamespace(),
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $config->getAutoGenerateProxyClasses()
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        if ($config->isSecondLevelCacheEnabled()) {
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $cacheConfig    = $config->getSecondLevelCacheConfiguration();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:            $cacheFactory   = $cacheConfig->getCacheFactory();
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        return $this->createQuery($this->config->getNamedQuery($name));
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        list($sql, $rsm) = $this->config->getNamedNativeQuery($name);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:                if (($class = $this->config->getCustomHydrationMode($hydrationMode)) !== null) {
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:        if ( ! $config->getMetadataDriverImpl()) {
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/FilterCollection.php:            $filterClass = $this->config->getFilterClassName($name);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/FilterCollection.php:        return null !== $this->config->getFilterClassName($name);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php:            case ($config->getCustomStringFunction($funcName) !== null):
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php:            case ($config->getCustomNumericFunction($funcName) !== null):
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php:            case ($config->getCustomDatetimeFunction($funcName) !== null):
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/ConvertMappingCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/CreateCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/DropCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/UpdateCommand.php:    \$config->setFilterSchemaAssetsExpression(\$regexp);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/SchemaTool.php:        $metadataSchemaConfig->setExplicitForeignKeyIndexes(false);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataDriverImpl($config->newDefaultAnnotationDriver($paths, $useSimpleAnnotationReader));
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataDriverImpl(new XmlDriver($paths));
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataDriverImpl(new YamlDriver($paths));
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setMetadataCacheImpl($cache);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setQueryCacheImpl($cache);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setResultCacheImpl($cache);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setProxyDir($proxyDir);
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setProxyNamespace('DoctrineProxies');
set:Composer/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Setup.php:        $config->setAutoGenerateProxyClasses($isDevMode);
set:Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('base_url'),
set:Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('username'),
set:Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('api_key')
set:Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('base_url'),
set:Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('username'),
set:Composer/vendor/guzzlehttp/guzzle/UPGRADING.md:            $config->get('api_key')
set:Composer/vendor/swiftmailer/swiftmailer/lib/mime_types.php:    'c11amz' => 'application/vnd.cluetrust.cartomobile-config-pkg',
set:Composer/vendor/symfony/dependency-injection/Compiler/Compiler.php:        $this->passConfig->addPass($pass, $type, $priority);
set:Composer/vendor/symfony/dependency-injection/Compiler/Compiler.php:            foreach ($this->passConfig->getPasses() as $pass) {
set:Composer/vendor/symfony/dependency-injection/Tests/Compiler/CheckCircularReferencesPassTest.php:        $passConfig->setOptimizationPasses([
set:Composer/vendor/symfony/dependency-injection/Tests/Compiler/CheckCircularReferencesPassTest.php:        $passConfig->setRemovingPasses([]);
set:Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $config->setBeforeOptimizationPasses([]);
set:Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $config->addPass($pass1, PassConfig::TYPE_BEFORE_OPTIMIZATION, 10);
set:Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $config->addPass($pass2, PassConfig::TYPE_BEFORE_OPTIMIZATION, 30);
set:Composer/vendor/symfony/dependency-injection/Tests/Compiler/PassConfigTest.php:        $passes = $config->getBeforeOptimizationPasses();
set:Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->setDefinition('baz', new Definition('BazClass'));
set:Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->setAlias('alias_for_foo', 'foo');
set:Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->setDefinition('foo', new Definition('BazClass'));
set:Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $this->assertSame(['%env(Bar)%'], $config->resolveEnvPlaceholders([$bag->get('env(Bar)')]));
set:Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $childDefB = $config->registerForAutoconfiguration('BInterface');
set:Composer/vendor/symfony/dependency-injection/Tests/ContainerBuilderTest.php:        $config->registerForAutoconfiguration('AInterface');
set:Composer/vendor/symfony/http-foundation/File/MimeType/MimeTypeExtensionGuesser.php:        'application/vnd.cluetrust.cartomobile-config-pkg' => 'c11amz',
set:Console/Job.class.php:		$this->fwjobsLogEnabled  = $this->freePBX->Config->get('FWJOBS_LOGS');
set:Console/Job.class.php:			$astLogdir = $this->freePBX->Config->get('ASTLOGDIR');
set:Console/Moduleadmin.class.php:		$brand = $this->FreePBX->Config->get('DASHBOARD_FREEPBX_BRAND');
set:Console/Moduleadmin.class.php:		$ident = $this->FreePBX->Config->get('FREEPBX_SYSTEM_IDENT');
set:Console/Moduleadmin.class.php:			$AMPASTERISKWEBUSER = $this->FreePBX->Config->get('AMPASTERISKWEBUSER');
set:Console/Moduleadmin.class.php:					$this->FreePBX->Config->update('MODULEADMINEDGE',1);
set:Console/Moduleadmin.class.php:				$this->previousEdge = $this->FreePBX->Config->get('MODULEADMINEDGE');
set:Console/Moduleadmin.class.php:					$this->FreePBX->Config->update('MODULEADMINEDGE',0);
set:Console/Moduleadmin.class.php:			$this->FreePBX->Config->update('MODULEADMINEDGE',$this->previousEdge);
set:Console/Moduleadmin.class.php:				$fwconsole = $this->FreePBX->Config->get('AMPSBIN')."/fwconsole";
set:Console/Moduleadmin.class.php:		$ampsbin = $this->FreePBX->Config->get('AMPSBIN');
set:Console/Moduleadmin.class.php:		$showSignCol = ($this->FreePBX->Config->get('SIGNATURECHECK')) ? _('Signature') : null;
set:Console/Moduleadmin.class.php:				} elseif (file_exists($this->FreePBX->Config->get('AMPWEBROOT') . "/admin/modules/" . $name . "/module.sig")) {
set:Console/Moduleadmin.class.php:					$sigfile = $this->FreePBX->Config->get('AMPWEBROOT') . "/admin/modules/" . $name . "/module.sig";
set:Console/Moduleadmin.class.php:		$devmode = $this->FreePBX->Config->get('DEVEL');
set:Console/Reload.class.php:		$this->symlink_dirs['bin'] = $this->freepbx->Config->get('AMPBIN');
set:Console/Reload.class.php:		$this->symlink_dirs['etc'] = $this->freepbx->Config->get('ASTETCDIR');
set:Console/Reload.class.php:		$this->symlink_dirs['images'] = $this->freepbx->Config->get('AMPWEBROOT') . "/admin/images";
set:Console/Reload.class.php:		$this->symlink_sound_dirs['sounds'] = $this->freepbx->Config->get('ASTVARLIBDIR') . '/sounds';
set:Console/Reload.class.php:		$this->cp_dirs['agi-bin'] 	= $this->freepbx->Config->get('ASTAGIDIR');
set:Console/Reload.class.php:		//$this->cp_dirs['bin'] = $this->freepbx->Config->get('AMPBIN');
set:Console/Reload.class.php:		$AMPWEBROOT = $this->freepbx->Config->get('AMPWEBROOT');
set:Console/Reload.class.php:		if (!$this->freepbx->Config->get('DISABLE_CSS_AUTOGEN')) {
set:Console/Reload.class.php:		if ($this->freepbx->Config->get('DISABLECUSTOMCONTEXTS')) {
set:Console/Reload.class.php:		if (!$this->freepbx->Config->get('NOTICE_BROWSER_STATS') && $this->freepbx->Config->get('BROWSER_STATS')) {
set:Console/Reload.class.php:			$this->freepbx->Config->update('NOTICE_BROWSER_STATS',true, true, true);
set:Console/Reload.class.php:		if (!$this->freepbx->Config->exists('AST_APP_VQA')) {
set:Console/Reload.class.php:			$this->freepbx->Config->define_conf_setting('AST_APP_VQA',$set);
set:Console/Reload.class.php:		$this->freepbx->Config->update('AST_APP_VQA', $this->freepbx->astman->app_exists('VQA'), true, true);
set:Console/Reload.class.php:		$my_probs = $this->skip_registry_checks ? false : $this->freepbx->Destinations->listProblemDestinations(!$this->freepbx->Config->get('CUSTOMASERROR'));
set:Console/Reload.class.php:		if ((!$extens_ok && $this->freepbx->Config->get('XTNCONFLICTABORT')) || (!$dests_ok && $this->freepbx->Config->get('BADDESTABORT'))) {
set:Console/Reload.class.php:		$this->freepbx->WriteConfig->writeConfig($ext->get_filename(), $ext->generateConf());
set:Console/Reload.class.php:		if ($this->freepbx->Config->amportal_canwrite()) {
set:Console/Reload.class.php:			file_put_contents('/etc/amportal.conf',$this->freepbx->Config->amportal_generate(true));
set:Console/Reload.class.php:		if ($this->freepbx->Config->get('AMPMGRPASS') == $this->freepbx->Config->get_conf_default_setting('AMPMGRPASS')) {
set:Console/Reload.class.php:		if ($this->freepbx->Config->get('AMPEXTENSIONS') == 'deviceanduser' && !$this->freepbx->Config->get('DYNAMICHINTS')) {
set:Console/Reload.class.php:		$post_custom = $this->freepbx->Config->get('AMPLOCALBIN').'/retrieve_conf_post_custom';
set:Console/Reload.class.php:		if ($this->freepbx->Config->get('AMPLOCALBIN') && file_exists($post_custom)) {
set:Console/Reload.class.php:		exec("grep '#include' ".$this->freepbx->Config->get('ASTETCDIR')."/*.conf | sed 's/;.*//; s/#include//'",$output,$retcode);
set:Console/Reload.class.php:			$target = ($rawfile[0] == '/') ? $rawfile : $this->freepbx->Config->get('ASTETCDIR')."/$rawfile";
set:Console/Reload.class.php:		if(!$this->freepbx->Config->get('SIGNATURECHECK')) {
set:Console/Reload.class.php:			if(file_exists($this->freepbx->Config->get('AMPBIN')."/fwconsole")) {
set:Console/Reload.class.php:				if(!is_executable($this->freepbx->Config->get('AMPBIN')."/fwconsole")) {
set:Console/Reload.class.php:					if(!@chmod($this->freepbx->Config->get('AMPBIN')."/fwconsole", 0755)) {
set:Console/Reload.class.php:				exec($this->freepbx->Config->get('AMPBIN')."/fwconsole util signaturecheck > /dev/null 2>&1 &");
set:Console/Reload.class.php:			$brand = $this->freepbx->Config->get('DASHBOARD_FREEPBX_BRAND');
set:Console/Reload.class.php:		if($this->freepbx->Config->get('ASTCONFAPP') == 'app_meetme') {
set:Console/Reload.class.php:		$srcdir = $this->freepbx->Config->get('AMPWEBROOT') . '/admin/modules/' . $module . '/assets';
set:Console/Reload.class.php:		$targetdir = $this->freepbx->Config->get('AMPWEBROOT') . "/admin/assets/" . $module;
set:Console/Reload.class.php:				if(preg_match('/^'.str_replace("/","\/",$this->freepbx->Config->get('ASTETCDIR')).'/',$dest) && is_writable($dest)) {
set:Console/Reload.class.php:					if(!file_exists($this->freepbx->Config->get('ASTETCDIR').'/backup')) {
set:Console/Reload.class.php:						mkdir($this->freepbx->Config->get('ASTETCDIR').'/backup');
set:Console/Reload.class.php:					$f = $this->freepbx->Config->get('ASTETCDIR').'/backup/'.basename($dest).".bk.".time();
set:Console/Reload.class.php:				} else if(preg_match('/^'.str_replace("/","\/",$this->freepbx->Config->get('AMPBIN')).'/',$dest) && is_writable($dest)) {
set:Console/Reload.class.php:					if(!file_exists($this->freepbx->Config->get('AMPBIN').'/backup')) {
set:Console/Reload.class.php:						mkdir($this->freepbx->Config->get('AMPBIN').'/backup');
set:Console/Reload.class.php:					$f = $this->freepbx->Config->get('AMPBIN').'/backup/'.basename($dest).".bk.".time();
set:Console/Reload.class.php:				} else if(preg_match('/^'.str_replace("/","\/",$this->freepbx->Config->get('ASTAGIDIR')).'/',$dest) && is_writable($dest)) {
set:Console/Reload.class.php:					if(!file_exists($this->freepbx->Config->get('ASTAGIDIR').'/backup')) {
set:Console/Reload.class.php:						mkdir($this->freepbx->Config->get('ASTAGIDIR').'/backup');
set:Console/Reload.class.php:					$f = $this->freepbx->Config->get('ASTAGIDIR').'/backup/'.basename($dest).".bk.".time();
set:Console/Reload.class.php:			$this->freepbx->Notifications->add_notice('retrieve_conf', 'SYMLINKNOTICE', _("Symlink Conflict Resolved"),sprintf(_("retrieve_conf resolved a symlink with %s<br \>This is a notice to let you know that the original file was moved to %s, there is nothing more you need to do"),$this->symlink_notice_modules,$this->freepbx->Config->get('ASTETCDIR').'/backup'));
set:Console/Reload.class.php:			$this->freepbx->Notifications->add_notice('retrieve_conf', 'SYMLINKNOTICEBIN', _("Symlink Conflict Resolved"),sprintf(_("retrieve_conf resolved a symlink with %s<br \>This is a notice to let you know that the original file was moved to %s, there is nothing more you need to do"),$this->symlink_notice_modules,$this->freepbx->Config->get('AMPBIN').'/backup'));
set:Console/Reload.class.php:			$this->freepbx->Notifications->add_notice('retrieve_conf', 'SYMLINKNOTICEAGI', _("Symlink Conflict Resolved"),sprintf(_("retrieve_conf resolved a symlink with %s<br \>This is a notice to let you know that the original file was moved to %s, there is nothing more you need to do"),$this->symlink_notice_modules,$this->freepbx->Config->get('ASTAGIDIR').'/backup'));
set:Console/Reload.class.php:						$ampowner = $this->freepbx->Config->get('AMPASTERISKWEBUSER');
set:Console/Reload.class.php:						$ampgroup =  $this->freepbx->Config->get('AMPASTERISKWEBUSER') != $this->freepbx->Config->get('AMPASTERISKUSER') ? $this->freepbx->Config->get('AMPASTERISKGROUP') : $this->freepbx->Config->get('AMPASTERISKWEBGROUP');
set:Console/Reload.class.php:			"command" => $this->freepbx->Config->get('AMPSBIN')."/fwconsole util cleanplaybackcache -q",
set:Console/Reload.class.php:		$setting_post_reload = $this->freepbx->Config->get('POST_RELOAD');
set:Console/Reload.class.php:		$setting_pre_reload = $this->freepbx->Config->get('PRE_RELOAD');
set:moduleAdminFunctions.php:	$brand = $FreePBX->Config->get("DASHBOARD_FREEPBX_BRAND");
set:moduleAdminFunctions.php:    $command = $FreePBX->Config->get('AMPBIN')."/module_admin listonline > /dev/null 2>&1";
set:moduleAdminFunctions.php:    if(!$FreePBX->Config->get('CRONMAN_UPDATES_CHECK')){
set:moduleAdminFunctions.php:        $FreePBX->Config->set('CRONMAN_UPDATES_CHECK', true);
set:moduleAdminFunctions.php:    $command = $FreePBX->Config->get('AMPBIN')."/module_admin listonline > /dev/null 2>&1";
set:moduleAdminFunctions.php:    if($FreePBX->Config->get('CRONMAN_UPDATES_CHECK')){
set:moduleAdminFunctions.php:        $FreePBX->Config->set('CRONMAN_UPDATES_CHECK', false);
set:moduleAdminFunctions.php:    return !empty($FreePBX->Config->get('CRONMAN_UPDATES_CHECK'));
set:modulefunctions.class.php:		$FreePBX->Config->update("SIGNATURECHECK", true);
