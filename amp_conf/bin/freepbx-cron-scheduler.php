#!/usr/bin/env php
<?php
//	License for all code of this FreePBX module can be found in the license file inside the module directory
//	Copyright 2013-2016 Schmooze Com Inc.
//
$bootstrap_settings['freepbx_auth'] = false;
include '/etc/freepbx.conf';

// Define the notification class for logging to the dashboard
$nt = notifications::create($db);

// Check to see if email should be sent

$cm = cronmanager::create($db);

// TODO: Remove run_jobs
$cm->run_jobs();

// If we have sysadmin installed, use that email address.
$from_email = get_current_user() . '@' . gethostname();
if(function_exists('sysadmin_get_storage_email')){
	$emails = sysadmin_get_storage_email();
	//Check that what we got back above is a email address
	if(!empty($emails['fromemail']) && filter_var($emails['fromemail'],FILTER_VALIDATE_EMAIL)){
		//Fallback address
		$from_email = $emails['fromemail'];
	}
}

$brand = \FreePBX::Config()->get('DASHBOARD_FREEPBX_BRAND');

$updatemanager = new \FreePBX\Builtin\UpdateManager();
$settings = $updatemanager->getCurrentUpdateSettings(false); // Don't html encode the output
$emailto = $settings['notification_emails'];

// Start by assuming we're NOT going to send an email.
$send_email = false;

// But just in case, start preparing the body.
$machine_name = $settings['system_ident'];
$subjects = [ "ok" => sprintf(_("%s Automatic Update Notification"), $brand), "error" => sprintf(_("%s Updates: Problems detected!"), $brand) ];

$emailsubject = $subjects['ok']; // Until told otherwise...

$emailbody = sprintf(_("This notification was generated by the %s Server identified as '%s'."), $brand, $machine_name)."\n";

if ($email) {
	// We MAY be sending an email. Remove our warning about no email address
	$nt->delete('freepbx', 'NOEMAIL');
} else {
	// Well. Now we know for sure that we're not.  Put a notification up
}

if(FreePBX::Config()->get('AUTOSECURITYUPDATES')) {
	$mf = module_functions::create();
	$mods = (array) $mf->get_security();
	if($mods) {
		// This machine has modules that require upgrading. We're going to be sending an email.
		$send_email = true;
		$emailsubject = $subjects['error'];
		$emailbody .= _("Security vulnerabilities were detected on this machine!")."\n";
		set_time_limit(0); //we NEED these updates
		$ampsbin = FreePBX::Config()->get('AMPSBIN');
		$errorvuls = array();
		foreach($mods as $rawname => $info) {
			$mi = $mf->getinfo($rawname);
			if(!isset($mi[$rawname])) {
				//module doesnt exist on this system
				continue;
			}
			switch($mi[$rawname]['status']) {
				case MODULE_STATUS_NOTINSTALLED:
				case MODULE_STATUS_DISABLED:
				case MODULE_STATUS_BROKEN:
					$action = "download";
				break;
				case MODULE_STATUS_ENABLED:
				case MODULE_STATUS_NEEDUPGRADE:
					$action = "upgrade";
				break;
				default:
					$action = "";
				break;
			}
			if(empty($action)) {
				//not sure what to do???
				$errorvuls[$rawname] = $info;
				continue;
			}
			exec($ampsbin."/fwconsole ma ".escapeshellarg($action)." ".escapeshellarg($rawname)." --format=json",$out,$ret);
			if($ret != 0) {
				$errorvuls[$rawname] = $info;
				$emailbody .= sprintf(_("  Module %s: Error upgrading! Please check System Dashboard!"), $rawname)."\n";
			} else {
				$emailbody .= sprintf(_("  Module %s: Upgraded to Version '%s' Successfully!"), $rawname, $vinfo['minver'])."\n";
			}
		}

		// Remove any previous notifications, as we're about to add some new ones
		$nt->delete("freepbx", "VULNERABILITIES");

		// We had errors upgrading these modules.
		if(!empty($errorvuls)) {
			$cnt = count($errorvuls);
			if ($cnt == 1) {
				$text = _("There is 1 module vulnerable to security threats");
			} else {
				$text = sprintf(_("There are %s modules vulnerable to security threats"), $cnt);
			}
			$extext = "";
			foreach($errorvuls as $m => $vinfo) {
				$extext .= sprintf(
					_("%s (Cur v. %s) should be upgraded to v. %s to fix security issues: %s")."\n",
					$m, $vinfo['curver'], $vinfo['minver'], implode($vinfo['vul'],', ')
				);
			}
			$notifications->add_security('freepbx', 'VULNERABILITIES', $text, $extext, 'config.php?display=modules');
		} else {
			$text = _("Modules vulnerable to security threats have been updated");
			foreach($mods as $m => $vinfo) {
				$extext .= sprintf(
					_("%s has been automatically upgraded to fix security issues: %s")."\n",
					$m, implode($vinfo['vul'],', ')
				);
			}
			$extext = $extext.". "._("You can disable this in advanced settings under 'Allow Automatic Security Updates'");
			$nt->add_notice('freepbx', 'AUTOVULNUPDATE', $text, $extext, 'config.php?display=modules',true,true);
		}
	}
}

// If we want to include information about unsigned modules (we should!)
if(FreePBX::Config()->get('SEND_UNSIGNED_EMAILS_NOTIFICATIONS')) {
	$unsigned = $nt->list_signature_unsigned();
	if (count($unsigned)) {
		$send_email = true;
		$emailsubject = $subjects['error'];
		$emailbody .= "\n" . _("UNSIGNED MODULES DETECTED:")."\n\n";
		foreach ($unsigned as $item) {
			$emailbody .= $item['display_text'].":\n";
			$emailbody .= $updatemanager->cleanHtml($item['extended_text'])."\n";
		}
		$emailbody .= "\n\n"._("Warning: It is unusual to have Unsigned modules on your system!")."\n";
		$emailbody .= sprintf(_("There are several ways to protect modules against tampering in %s. Please see the wiki page on module signing for more information:"), $brand)."\n";
		$emailbody .= "    http://wiki.freepbx.org/display/FOP/Signing+your+own+modules\n";
	}
} else {
	$emailbody .= _("Note that Unsigned module notifications are turned off. You will not get alerts about new modules that are installed on your system without a valid signature. It is unusual to turn off this protection. You can turn it on in 'Advanced Settings' by enabling the 'SEND_UNSIGNED_EMAILS_NOTIFICATIONS' option.")."\n";
	$unsigned = [];
}

$security = $nt->list_security();
if (count($security)) {
	$send_email = true;
	$emailsubject = $subjects['error'];
	$emailbody .= "\n"._("SECURITY NOTICE:")."\n\n";
	foreach ($security as $item) {
		$emailbody .= $item['display_text'].":\n\n";
		$emailbody .= $updatemanager->cleanHtml($item['extended_text'])."\n";
	}
}

$updates = $nt->list_update();
if (count($updates)) {
	$send_email = true;
	$emailbody .= "\n"._("UPDATE NOTICE:")."\n\n";
	foreach ($updates as $item) {
		$emailbody .= $item['display_text']."\n";
		$emailbody .= $item['extended_text']."\n\n";
	}
}

print "I have emailbody of $emailbody\n";
// Do we need to send the email?
if ($send_email) {
	// Do we have an email address?
	if (!$email) {
		$nt->add_notice('freepbx', 'NOEMAIL', _('No email address for online update checks'), _('Your machine does not know where to send the results of automatic Updates and Upgrades. Please configure a valid email address in System Updates.'), 'config.php?display=modules#email', 'PASSIVE', false);
	} else {
		if ($updatemanager->sendEmail("auto_updates", $emailto, $from_email, $emailsubject, $emailbody)) {
			$nt->delete('freepbx', 'EMAILFAIL');
		} else {
			$nt->add_error('freepbx', 'EMAILFAIL', _('Failed to send online update email'), sprintf(_('An attempt to send email to: %s with online update status failed'),$emailto));
		}
	}
}
